=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module IbmCloudPower
  class PCloudVPNPoliciesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete IKE Policy
    # Delete an IKE Policy (by its unique identifier)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param ike_policy_id [String] ID of a IKE Policy
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def pcloud_ikepolicies_delete(cloud_instance_id, ike_policy_id, opts = {})
      data, _status_code, _headers = pcloud_ikepolicies_delete_with_http_info(cloud_instance_id, ike_policy_id, opts)
      data
    end

    # Delete IKE Policy
    # Delete an IKE Policy (by its unique identifier)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param ike_policy_id [String] ID of a IKE Policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def pcloud_ikepolicies_delete_with_http_info(cloud_instance_id, ike_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNPoliciesApi.pcloud_ikepolicies_delete ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNPoliciesApi.pcloud_ikepolicies_delete"
      end
      # verify the required parameter 'ike_policy_id' is set
      if @api_client.config.client_side_validation && ike_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ike_policy_id' when calling PCloudVPNPoliciesApi.pcloud_ikepolicies_delete"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/ike-policies/{ike_policy_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'ike_policy_id' + '}', CGI.escape(ike_policy_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNPoliciesApi.pcloud_ikepolicies_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNPoliciesApi#pcloud_ikepolicies_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the specified IKE Policy
    # Get an IKE Policy (by its unique identifier)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param ike_policy_id [String] ID of a IKE Policy
    # @param [Hash] opts the optional parameters
    # @return [IKEPolicy]
    def pcloud_ikepolicies_get(cloud_instance_id, ike_policy_id, opts = {})
      data, _status_code, _headers = pcloud_ikepolicies_get_with_http_info(cloud_instance_id, ike_policy_id, opts)
      data
    end

    # Get the specified IKE Policy
    # Get an IKE Policy (by its unique identifier)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param ike_policy_id [String] ID of a IKE Policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(IKEPolicy, Integer, Hash)>] IKEPolicy data, response status code and response headers
    def pcloud_ikepolicies_get_with_http_info(cloud_instance_id, ike_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNPoliciesApi.pcloud_ikepolicies_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNPoliciesApi.pcloud_ikepolicies_get"
      end
      # verify the required parameter 'ike_policy_id' is set
      if @api_client.config.client_side_validation && ike_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ike_policy_id' when calling PCloudVPNPoliciesApi.pcloud_ikepolicies_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/ike-policies/{ike_policy_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'ike_policy_id' + '}', CGI.escape(ike_policy_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IKEPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNPoliciesApi.pcloud_ikepolicies_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNPoliciesApi#pcloud_ikepolicies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all IKE Policies
    # List all IKE Policies with all attributes
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [IKEPolicies]
    def pcloud_ikepolicies_getall(cloud_instance_id, opts = {})
      data, _status_code, _headers = pcloud_ikepolicies_getall_with_http_info(cloud_instance_id, opts)
      data
    end

    # Get all IKE Policies
    # List all IKE Policies with all attributes
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(IKEPolicies, Integer, Hash)>] IKEPolicies data, response status code and response headers
    def pcloud_ikepolicies_getall_with_http_info(cloud_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNPoliciesApi.pcloud_ikepolicies_getall ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNPoliciesApi.pcloud_ikepolicies_getall"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/ike-policies'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IKEPolicies'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNPoliciesApi.pcloud_ikepolicies_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNPoliciesApi#pcloud_ikepolicies_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add IKE Policy
    # Add a new IKE Policy
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [IKEPolicyCreate] Parameters for the creation of a new IKE Policy
    # @param [Hash] opts the optional parameters
    # @return [IKEPolicy]
    def pcloud_ikepolicies_post(cloud_instance_id, body, opts = {})
      data, _status_code, _headers = pcloud_ikepolicies_post_with_http_info(cloud_instance_id, body, opts)
      data
    end

    # Add IKE Policy
    # Add a new IKE Policy
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [IKEPolicyCreate] Parameters for the creation of a new IKE Policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(IKEPolicy, Integer, Hash)>] IKEPolicy data, response status code and response headers
    def pcloud_ikepolicies_post_with_http_info(cloud_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNPoliciesApi.pcloud_ikepolicies_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNPoliciesApi.pcloud_ikepolicies_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVPNPoliciesApi.pcloud_ikepolicies_post"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/ike-policies'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'IKEPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNPoliciesApi.pcloud_ikepolicies_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNPoliciesApi#pcloud_ikepolicies_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update IKE Policy
    # update an IKE Policy (by its unique identifier)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param ike_policy_id [String] ID of a IKE Policy
    # @param body [IKEPolicyUpdate] Parameters for updating IKE Policy
    # @param [Hash] opts the optional parameters
    # @return [IKEPolicy]
    def pcloud_ikepolicies_put(cloud_instance_id, ike_policy_id, body, opts = {})
      data, _status_code, _headers = pcloud_ikepolicies_put_with_http_info(cloud_instance_id, ike_policy_id, body, opts)
      data
    end

    # Update IKE Policy
    # update an IKE Policy (by its unique identifier)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param ike_policy_id [String] ID of a IKE Policy
    # @param body [IKEPolicyUpdate] Parameters for updating IKE Policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(IKEPolicy, Integer, Hash)>] IKEPolicy data, response status code and response headers
    def pcloud_ikepolicies_put_with_http_info(cloud_instance_id, ike_policy_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNPoliciesApi.pcloud_ikepolicies_put ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNPoliciesApi.pcloud_ikepolicies_put"
      end
      # verify the required parameter 'ike_policy_id' is set
      if @api_client.config.client_side_validation && ike_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ike_policy_id' when calling PCloudVPNPoliciesApi.pcloud_ikepolicies_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVPNPoliciesApi.pcloud_ikepolicies_put"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/ike-policies/{ike_policy_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'ike_policy_id' + '}', CGI.escape(ike_policy_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'IKEPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNPoliciesApi.pcloud_ikepolicies_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNPoliciesApi#pcloud_ikepolicies_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete IPSec Policy
    # Delete an IPSec Policy (by its unique identifier)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param ipsec_policy_id [String] ID of a IPSec Policy
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def pcloud_ipsecpolicies_delete(cloud_instance_id, ipsec_policy_id, opts = {})
      data, _status_code, _headers = pcloud_ipsecpolicies_delete_with_http_info(cloud_instance_id, ipsec_policy_id, opts)
      data
    end

    # Delete IPSec Policy
    # Delete an IPSec Policy (by its unique identifier)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param ipsec_policy_id [String] ID of a IPSec Policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def pcloud_ipsecpolicies_delete_with_http_info(cloud_instance_id, ipsec_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNPoliciesApi.pcloud_ipsecpolicies_delete ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNPoliciesApi.pcloud_ipsecpolicies_delete"
      end
      # verify the required parameter 'ipsec_policy_id' is set
      if @api_client.config.client_side_validation && ipsec_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_policy_id' when calling PCloudVPNPoliciesApi.pcloud_ipsecpolicies_delete"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/ipsec-policies/{ipsec_policy_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'ipsec_policy_id' + '}', CGI.escape(ipsec_policy_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNPoliciesApi.pcloud_ipsecpolicies_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNPoliciesApi#pcloud_ipsecpolicies_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the specified IPSec Policy
    # Get an IPSec Policy (by its unique identifier)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param ipsec_policy_id [String] ID of a IPSec Policy
    # @param [Hash] opts the optional parameters
    # @return [IPSecPolicy]
    def pcloud_ipsecpolicies_get(cloud_instance_id, ipsec_policy_id, opts = {})
      data, _status_code, _headers = pcloud_ipsecpolicies_get_with_http_info(cloud_instance_id, ipsec_policy_id, opts)
      data
    end

    # Get the specified IPSec Policy
    # Get an IPSec Policy (by its unique identifier)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param ipsec_policy_id [String] ID of a IPSec Policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecPolicy, Integer, Hash)>] IPSecPolicy data, response status code and response headers
    def pcloud_ipsecpolicies_get_with_http_info(cloud_instance_id, ipsec_policy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNPoliciesApi.pcloud_ipsecpolicies_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNPoliciesApi.pcloud_ipsecpolicies_get"
      end
      # verify the required parameter 'ipsec_policy_id' is set
      if @api_client.config.client_side_validation && ipsec_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_policy_id' when calling PCloudVPNPoliciesApi.pcloud_ipsecpolicies_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/ipsec-policies/{ipsec_policy_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'ipsec_policy_id' + '}', CGI.escape(ipsec_policy_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IPSecPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNPoliciesApi.pcloud_ipsecpolicies_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNPoliciesApi#pcloud_ipsecpolicies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all IPSec Policies
    # Get all IPSec Policies with all their attributes
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [IPSecPolicies]
    def pcloud_ipsecpolicies_getall(cloud_instance_id, opts = {})
      data, _status_code, _headers = pcloud_ipsecpolicies_getall_with_http_info(cloud_instance_id, opts)
      data
    end

    # Get all IPSec Policies
    # Get all IPSec Policies with all their attributes
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecPolicies, Integer, Hash)>] IPSecPolicies data, response status code and response headers
    def pcloud_ipsecpolicies_getall_with_http_info(cloud_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNPoliciesApi.pcloud_ipsecpolicies_getall ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNPoliciesApi.pcloud_ipsecpolicies_getall"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/ipsec-policies'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IPSecPolicies'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNPoliciesApi.pcloud_ipsecpolicies_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNPoliciesApi#pcloud_ipsecpolicies_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add IPSec Policy
    # Add a new IPSec Policy
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [IPSecPolicyCreate] Parameters for the creation of a new IPSec Policy
    # @param [Hash] opts the optional parameters
    # @return [IPSecPolicy]
    def pcloud_ipsecpolicies_post(cloud_instance_id, body, opts = {})
      data, _status_code, _headers = pcloud_ipsecpolicies_post_with_http_info(cloud_instance_id, body, opts)
      data
    end

    # Add IPSec Policy
    # Add a new IPSec Policy
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [IPSecPolicyCreate] Parameters for the creation of a new IPSec Policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecPolicy, Integer, Hash)>] IPSecPolicy data, response status code and response headers
    def pcloud_ipsecpolicies_post_with_http_info(cloud_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNPoliciesApi.pcloud_ipsecpolicies_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNPoliciesApi.pcloud_ipsecpolicies_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVPNPoliciesApi.pcloud_ipsecpolicies_post"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/ipsec-policies'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'IPSecPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNPoliciesApi.pcloud_ipsecpolicies_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNPoliciesApi#pcloud_ipsecpolicies_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update IPSec Policy
    # update an IPSec Policy
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param ipsec_policy_id [String] ID of a IPSec Policy
    # @param body [IPSecPolicyUpdate] Parameters for the update of an IPSec Policy
    # @param [Hash] opts the optional parameters
    # @return [IPSecPolicy]
    def pcloud_ipsecpolicies_put(cloud_instance_id, ipsec_policy_id, body, opts = {})
      data, _status_code, _headers = pcloud_ipsecpolicies_put_with_http_info(cloud_instance_id, ipsec_policy_id, body, opts)
      data
    end

    # Update IPSec Policy
    # update an IPSec Policy
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param ipsec_policy_id [String] ID of a IPSec Policy
    # @param body [IPSecPolicyUpdate] Parameters for the update of an IPSec Policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(IPSecPolicy, Integer, Hash)>] IPSecPolicy data, response status code and response headers
    def pcloud_ipsecpolicies_put_with_http_info(cloud_instance_id, ipsec_policy_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNPoliciesApi.pcloud_ipsecpolicies_put ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNPoliciesApi.pcloud_ipsecpolicies_put"
      end
      # verify the required parameter 'ipsec_policy_id' is set
      if @api_client.config.client_side_validation && ipsec_policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'ipsec_policy_id' when calling PCloudVPNPoliciesApi.pcloud_ipsecpolicies_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVPNPoliciesApi.pcloud_ipsecpolicies_put"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/ipsec-policies/{ipsec_policy_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'ipsec_policy_id' + '}', CGI.escape(ipsec_policy_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'IPSecPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNPoliciesApi.pcloud_ipsecpolicies_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNPoliciesApi#pcloud_ipsecpolicies_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
