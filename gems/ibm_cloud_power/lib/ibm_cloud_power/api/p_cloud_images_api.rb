=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module IbmCloudPower
  class PCloudImagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an Image from a Cloud Instance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param image_id [String] Image ID of a image
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def pcloud_cloudinstances_images_delete(cloud_instance_id, image_id, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_images_delete_with_http_info(cloud_instance_id, image_id, opts)
      data
    end

    # Delete an Image from a Cloud Instance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param image_id [String] Image ID of a image
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def pcloud_cloudinstances_images_delete_with_http_info(cloud_instance_id, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudImagesApi.pcloud_cloudinstances_images_delete ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudImagesApi.pcloud_cloudinstances_images_delete"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling PCloudImagesApi.pcloud_cloudinstances_images_delete"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/images/{image_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'image_id' + '}', CGI.escape(image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudImagesApi.pcloud_cloudinstances_images_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudImagesApi#pcloud_cloudinstances_images_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export an image
    # This API is deprecated for /pcloud/v2/cloud-instances/{cloud_instance_id}/images/{image_id}/export.  >*Note*: Support for this API is available till Oct 2022. 
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param image_id [String] Image ID of a image
    # @param body [ExportImage] Parameters for exporting an image
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def pcloud_cloudinstances_images_export_post(cloud_instance_id, image_id, body, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_images_export_post_with_http_info(cloud_instance_id, image_id, body, opts)
      data
    end

    # Export an image
    # This API is deprecated for /pcloud/v2/cloud-instances/{cloud_instance_id}/images/{image_id}/export.  &gt;*Note*: Support for this API is available till Oct 2022. 
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param image_id [String] Image ID of a image
    # @param body [ExportImage] Parameters for exporting an image
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def pcloud_cloudinstances_images_export_post_with_http_info(cloud_instance_id, image_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudImagesApi.pcloud_cloudinstances_images_export_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudImagesApi.pcloud_cloudinstances_images_export_post"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling PCloudImagesApi.pcloud_cloudinstances_images_export_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudImagesApi.pcloud_cloudinstances_images_export_post"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/images/{image_id}/export'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'image_id' + '}', CGI.escape(image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudImagesApi.pcloud_cloudinstances_images_export_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudImagesApi#pcloud_cloudinstances_images_export_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detailed info of an image
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param image_id [String] Image ID of a image
    # @param [Hash] opts the optional parameters
    # @return [Image]
    def pcloud_cloudinstances_images_get(cloud_instance_id, image_id, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_images_get_with_http_info(cloud_instance_id, image_id, opts)
      data
    end

    # Detailed info of an image
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param image_id [String] Image ID of a image
    # @param [Hash] opts the optional parameters
    # @return [Array<(Image, Integer, Hash)>] Image data, response status code and response headers
    def pcloud_cloudinstances_images_get_with_http_info(cloud_instance_id, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudImagesApi.pcloud_cloudinstances_images_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudImagesApi.pcloud_cloudinstances_images_get"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling PCloudImagesApi.pcloud_cloudinstances_images_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/images/{image_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'image_id' + '}', CGI.escape(image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Image'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudImagesApi.pcloud_cloudinstances_images_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudImagesApi#pcloud_cloudinstances_images_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all images for this cloud instance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [Images]
    def pcloud_cloudinstances_images_getall(cloud_instance_id, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_images_getall_with_http_info(cloud_instance_id, opts)
      data
    end

    # List all images for this cloud instance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(Images, Integer, Hash)>] Images data, response status code and response headers
    def pcloud_cloudinstances_images_getall_with_http_info(cloud_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudImagesApi.pcloud_cloudinstances_images_getall ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudImagesApi.pcloud_cloudinstances_images_getall"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/images'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Images'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudImagesApi.pcloud_cloudinstances_images_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudImagesApi#pcloud_cloudinstances_images_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Image (from available images)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [CreateImage] Parameters for the creation of a new image from available images
    # @param [Hash] opts the optional parameters
    # @return [Image]
    def pcloud_cloudinstances_images_post(cloud_instance_id, body, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_images_post_with_http_info(cloud_instance_id, body, opts)
      data
    end

    # Create a new Image (from available images)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [CreateImage] Parameters for the creation of a new image from available images
    # @param [Hash] opts the optional parameters
    # @return [Array<(Image, Integer, Hash)>] Image data, response status code and response headers
    def pcloud_cloudinstances_images_post_with_http_info(cloud_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudImagesApi.pcloud_cloudinstances_images_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudImagesApi.pcloud_cloudinstances_images_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudImagesApi.pcloud_cloudinstances_images_post"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/images'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Image'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudImagesApi.pcloud_cloudinstances_images_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudImagesApi#pcloud_cloudinstances_images_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detailed info of an available stock image
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param image_id [String] Image ID of a image
    # @param [Hash] opts the optional parameters
    # @return [Image]
    def pcloud_cloudinstances_stockimages_get(cloud_instance_id, image_id, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_stockimages_get_with_http_info(cloud_instance_id, image_id, opts)
      data
    end

    # Detailed info of an available stock image
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param image_id [String] Image ID of a image
    # @param [Hash] opts the optional parameters
    # @return [Array<(Image, Integer, Hash)>] Image data, response status code and response headers
    def pcloud_cloudinstances_stockimages_get_with_http_info(cloud_instance_id, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudImagesApi.pcloud_cloudinstances_stockimages_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudImagesApi.pcloud_cloudinstances_stockimages_get"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling PCloudImagesApi.pcloud_cloudinstances_stockimages_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/stock-images/{image_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'image_id' + '}', CGI.escape(image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Image'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudImagesApi.pcloud_cloudinstances_stockimages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudImagesApi#pcloud_cloudinstances_stockimages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all available stock images
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :sap Include SAP images with get available stock images
    # @option opts [Boolean] :vtl Include VTL images with get available stock images
    # @return [Images]
    def pcloud_cloudinstances_stockimages_getall(cloud_instance_id, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_stockimages_getall_with_http_info(cloud_instance_id, opts)
      data
    end

    # List all available stock images
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :sap Include SAP images with get available stock images
    # @option opts [Boolean] :vtl Include VTL images with get available stock images
    # @return [Array<(Images, Integer, Hash)>] Images data, response status code and response headers
    def pcloud_cloudinstances_stockimages_getall_with_http_info(cloud_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudImagesApi.pcloud_cloudinstances_stockimages_getall ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudImagesApi.pcloud_cloudinstances_stockimages_getall"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/stock-images'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sap'] = opts[:'sap'] if !opts[:'sap'].nil?
      query_params[:'vtl'] = opts[:'vtl'] if !opts[:'vtl'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Images'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudImagesApi.pcloud_cloudinstances_stockimages_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudImagesApi#pcloud_cloudinstances_stockimages_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detailed info of an image in the image-catalog
    # This API is deprecated for /pcloud/v1/cloud-instances/{cloud_instance_id}/stock-images/{image_id}.  >*Note*: Support for this API will be available till 31st March 2023. 
    # @param image_id [String] Image ID of a image
    # @param [Hash] opts the optional parameters
    # @return [Image]
    def pcloud_images_get(image_id, opts = {})
      data, _status_code, _headers = pcloud_images_get_with_http_info(image_id, opts)
      data
    end

    # Detailed info of an image in the image-catalog
    # This API is deprecated for /pcloud/v1/cloud-instances/{cloud_instance_id}/stock-images/{image_id}.  &gt;*Note*: Support for this API will be available till 31st March 2023. 
    # @param image_id [String] Image ID of a image
    # @param [Hash] opts the optional parameters
    # @return [Array<(Image, Integer, Hash)>] Image data, response status code and response headers
    def pcloud_images_get_with_http_info(image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudImagesApi.pcloud_images_get ...'
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling PCloudImagesApi.pcloud_images_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/images/{image_id}'.sub('{' + 'image_id' + '}', CGI.escape(image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Image'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudImagesApi.pcloud_images_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudImagesApi#pcloud_images_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all the images in the image-catalog
    # This API is deprecated for /pcloud/v1/cloud-instances/{cloud_instance_id}/stock-images.  >*Note*: Support for this API will be available till 31st March 2023. 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :sap Include SAP images with get available stock images
    # @option opts [Boolean] :vtl Include VTL images with get available stock images
    # @return [Images]
    def pcloud_images_getall(opts = {})
      data, _status_code, _headers = pcloud_images_getall_with_http_info(opts)
      data
    end

    # List all the images in the image-catalog
    # This API is deprecated for /pcloud/v1/cloud-instances/{cloud_instance_id}/stock-images.  &gt;*Note*: Support for this API will be available till 31st March 2023. 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :sap Include SAP images with get available stock images
    # @option opts [Boolean] :vtl Include VTL images with get available stock images
    # @return [Array<(Images, Integer, Hash)>] Images data, response status code and response headers
    def pcloud_images_getall_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudImagesApi.pcloud_images_getall ...'
      end
      # resource path
      local_var_path = '/pcloud/v1/images'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sap'] = opts[:'sap'] if !opts[:'sap'].nil?
      query_params[:'vtl'] = opts[:'vtl'] if !opts[:'vtl'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Images'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudImagesApi.pcloud_images_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudImagesApi#pcloud_images_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get detail of last cos-image import job
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def pcloud_v1_cloudinstances_cosimages_get(cloud_instance_id, opts = {})
      data, _status_code, _headers = pcloud_v1_cloudinstances_cosimages_get_with_http_info(cloud_instance_id, opts)
      data
    end

    # Get detail of last cos-image import job
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Integer, Hash)>] Job data, response status code and response headers
    def pcloud_v1_cloudinstances_cosimages_get_with_http_info(cloud_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudImagesApi.pcloud_v1_cloudinstances_cosimages_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudImagesApi.pcloud_v1_cloudinstances_cosimages_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/cos-images'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Job'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudImagesApi.pcloud_v1_cloudinstances_cosimages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudImagesApi#pcloud_v1_cloudinstances_cosimages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an cos-image import job
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [CreateCosImageImportJob] Parameters for the creation of a new cos-image import job
    # @param [Hash] opts the optional parameters
    # @return [JobReference]
    def pcloud_v1_cloudinstances_cosimages_post(cloud_instance_id, body, opts = {})
      data, _status_code, _headers = pcloud_v1_cloudinstances_cosimages_post_with_http_info(cloud_instance_id, body, opts)
      data
    end

    # Create an cos-image import job
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [CreateCosImageImportJob] Parameters for the creation of a new cos-image import job
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobReference, Integer, Hash)>] JobReference data, response status code and response headers
    def pcloud_v1_cloudinstances_cosimages_post_with_http_info(cloud_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudImagesApi.pcloud_v1_cloudinstances_cosimages_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudImagesApi.pcloud_v1_cloudinstances_cosimages_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudImagesApi.pcloud_v1_cloudinstances_cosimages_post"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/cos-images'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'JobReference'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudImagesApi.pcloud_v1_cloudinstances_cosimages_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudImagesApi#pcloud_v1_cloudinstances_cosimages_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get detail of last image export job
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param image_id [String] Image ID of a image
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def pcloud_v2_images_export_get(cloud_instance_id, image_id, opts = {})
      data, _status_code, _headers = pcloud_v2_images_export_get_with_http_info(cloud_instance_id, image_id, opts)
      data
    end

    # Get detail of last image export job
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param image_id [String] Image ID of a image
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Integer, Hash)>] Job data, response status code and response headers
    def pcloud_v2_images_export_get_with_http_info(cloud_instance_id, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudImagesApi.pcloud_v2_images_export_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudImagesApi.pcloud_v2_images_export_get"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling PCloudImagesApi.pcloud_v2_images_export_get"
      end
      # resource path
      local_var_path = '/pcloud/v2/cloud-instances/{cloud_instance_id}/images/{image_id}/export'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'image_id' + '}', CGI.escape(image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Job'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudImagesApi.pcloud_v2_images_export_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudImagesApi#pcloud_v2_images_export_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add image export job to the jobs queue
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param image_id [String] Image ID of a image
    # @param body [ExportImage] Parameters for the export
    # @param [Hash] opts the optional parameters
    # @return [JobReference]
    def pcloud_v2_images_export_post(cloud_instance_id, image_id, body, opts = {})
      data, _status_code, _headers = pcloud_v2_images_export_post_with_http_info(cloud_instance_id, image_id, body, opts)
      data
    end

    # Add image export job to the jobs queue
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param image_id [String] Image ID of a image
    # @param body [ExportImage] Parameters for the export
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobReference, Integer, Hash)>] JobReference data, response status code and response headers
    def pcloud_v2_images_export_post_with_http_info(cloud_instance_id, image_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudImagesApi.pcloud_v2_images_export_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudImagesApi.pcloud_v2_images_export_post"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling PCloudImagesApi.pcloud_v2_images_export_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudImagesApi.pcloud_v2_images_export_post"
      end
      # resource path
      local_var_path = '/pcloud/v2/cloud-instances/{cloud_instance_id}/images/{image_id}/export'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'image_id' + '}', CGI.escape(image_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'JobReference'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudImagesApi.pcloud_v2_images_export_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudImagesApi#pcloud_v2_images_export_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
