=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module IbmCloudPower
  class PCloudJobsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a cloud instance job
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param job_id [String] PCloud Job ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def pcloud_cloudinstances_jobs_delete(cloud_instance_id, job_id, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_jobs_delete_with_http_info(cloud_instance_id, job_id, opts)
      data
    end

    # Delete a cloud instance job
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param job_id [String] PCloud Job ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def pcloud_cloudinstances_jobs_delete_with_http_info(cloud_instance_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudJobsApi.pcloud_cloudinstances_jobs_delete ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudJobsApi.pcloud_cloudinstances_jobs_delete"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling PCloudJobsApi.pcloud_cloudinstances_jobs_delete"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/jobs/{job_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudJobsApi.pcloud_cloudinstances_jobs_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudJobsApi#pcloud_cloudinstances_jobs_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the detail of a job
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param job_id [String] PCloud Job ID
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def pcloud_cloudinstances_jobs_get(cloud_instance_id, job_id, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_jobs_get_with_http_info(cloud_instance_id, job_id, opts)
      data
    end

    # List the detail of a job
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param job_id [String] PCloud Job ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Integer, Hash)>] Job data, response status code and response headers
    def pcloud_cloudinstances_jobs_get_with_http_info(cloud_instance_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudJobsApi.pcloud_cloudinstances_jobs_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudJobsApi.pcloud_cloudinstances_jobs_get"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling PCloudJobsApi.pcloud_cloudinstances_jobs_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/jobs/{job_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Job'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudJobsApi.pcloud_cloudinstances_jobs_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudJobsApi#pcloud_cloudinstances_jobs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List up to the last 5 jobs initiated by the cloud instance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :operation_id Operation ID to filter jobs (optional)
    # @option opts [String] :operation_target Operation target to filter jobs (optional)
    # @option opts [String] :operation_action Operation action to filter jobs (optional) vmCapture - includes operation action value (vmCapture) imageExport - includes operation action value (imageExport) imageImport - includes operation action value (imageImport) storage - includes operation action values (vmCapture,imageExport,imageImport)
    # @return [Jobs]
    def pcloud_cloudinstances_jobs_getall(cloud_instance_id, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_jobs_getall_with_http_info(cloud_instance_id, opts)
      data
    end

    # List up to the last 5 jobs initiated by the cloud instance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :operation_id Operation ID to filter jobs (optional)
    # @option opts [String] :operation_target Operation target to filter jobs (optional)
    # @option opts [String] :operation_action Operation action to filter jobs (optional) vmCapture - includes operation action value (vmCapture) imageExport - includes operation action value (imageExport) imageImport - includes operation action value (imageImport) storage - includes operation action values (vmCapture,imageExport,imageImport)
    # @return [Array<(Jobs, Integer, Hash)>] Jobs data, response status code and response headers
    def pcloud_cloudinstances_jobs_getall_with_http_info(cloud_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudJobsApi.pcloud_cloudinstances_jobs_getall ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudJobsApi.pcloud_cloudinstances_jobs_getall"
      end
      allowable_values = ["cloudConnection", "pvmInstance", "image", "vpnConnection"]
      if @api_client.config.client_side_validation && opts[:'operation_target'] && !allowable_values.include?(opts[:'operation_target'])
        fail ArgumentError, "invalid value for \"operation_target\", must be one of #{allowable_values}"
      end
      allowable_values = ["vmCapture", "imageExport", "imageImport", "storage"]
      if @api_client.config.client_side_validation && opts[:'operation_action'] && !allowable_values.include?(opts[:'operation_action'])
        fail ArgumentError, "invalid value for \"operation_action\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/jobs'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'operation.id'] = opts[:'operation_id'] if !opts[:'operation_id'].nil?
      query_params[:'operation.target'] = opts[:'operation_target'] if !opts[:'operation_target'].nil?
      query_params[:'operation.action'] = opts[:'operation_action'] if !opts[:'operation_action'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Jobs'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudJobsApi.pcloud_cloudinstances_jobs_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudJobsApi#pcloud_cloudinstances_jobs_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
