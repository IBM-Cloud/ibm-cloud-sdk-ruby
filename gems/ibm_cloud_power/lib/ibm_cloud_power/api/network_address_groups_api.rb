=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module IbmCloudPower
  class NetworkAddressGroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the list of Network Address Groups for a workspace
    # @param [Hash] opts the optional parameters
    # @return [NetworkAddressGroups]
    def v1_network_address_groups_get(opts = {})
      data, _status_code, _headers = v1_network_address_groups_get_with_http_info(opts)
      data
    end

    # Get the list of Network Address Groups for a workspace
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkAddressGroups, Integer, Hash)>] NetworkAddressGroups data, response status code and response headers
    def v1_network_address_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkAddressGroupsApi.v1_network_address_groups_get ...'
      end
      # resource path
      local_var_path = '/v1/network-address-groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkAddressGroups'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkAddressGroupsApi.v1_network_address_groups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkAddressGroupsApi#v1_network_address_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Network Address Group from a workspace
    # @param network_address_group_id [String] Network Address Group ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_network_address_groups_id_delete(network_address_group_id, opts = {})
      data, _status_code, _headers = v1_network_address_groups_id_delete_with_http_info(network_address_group_id, opts)
      data
    end

    # Delete a Network Address Group from a workspace
    # @param network_address_group_id [String] Network Address Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_network_address_groups_id_delete_with_http_info(network_address_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkAddressGroupsApi.v1_network_address_groups_id_delete ...'
      end
      # verify the required parameter 'network_address_group_id' is set
      if @api_client.config.client_side_validation && network_address_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_address_group_id' when calling NetworkAddressGroupsApi.v1_network_address_groups_id_delete"
      end
      # resource path
      local_var_path = '/v1/network-address-groups/{network_address_group_id}'.sub('{' + 'network_address_group_id' + '}', CGI.escape(network_address_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkAddressGroupsApi.v1_network_address_groups_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkAddressGroupsApi#v1_network_address_groups_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the detail of a Network Address Group
    # @param network_address_group_id [String] Network Address Group ID
    # @param [Hash] opts the optional parameters
    # @return [NetworkAddressGroup]
    def v1_network_address_groups_id_get(network_address_group_id, opts = {})
      data, _status_code, _headers = v1_network_address_groups_id_get_with_http_info(network_address_group_id, opts)
      data
    end

    # Get the detail of a Network Address Group
    # @param network_address_group_id [String] Network Address Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkAddressGroup, Integer, Hash)>] NetworkAddressGroup data, response status code and response headers
    def v1_network_address_groups_id_get_with_http_info(network_address_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkAddressGroupsApi.v1_network_address_groups_id_get ...'
      end
      # verify the required parameter 'network_address_group_id' is set
      if @api_client.config.client_side_validation && network_address_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_address_group_id' when calling NetworkAddressGroupsApi.v1_network_address_groups_id_get"
      end
      # resource path
      local_var_path = '/v1/network-address-groups/{network_address_group_id}'.sub('{' + 'network_address_group_id' + '}', CGI.escape(network_address_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkAddressGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkAddressGroupsApi.v1_network_address_groups_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkAddressGroupsApi#v1_network_address_groups_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Network Address Group
    # @param network_address_group_id [String] Network Address Group ID
    # @param body [NetworkAddressGroupUpdate] Parameters for the update of a Network Address Group
    # @param [Hash] opts the optional parameters
    # @return [NetworkAddressGroup]
    def v1_network_address_groups_id_put(network_address_group_id, body, opts = {})
      data, _status_code, _headers = v1_network_address_groups_id_put_with_http_info(network_address_group_id, body, opts)
      data
    end

    # Update a Network Address Group
    # @param network_address_group_id [String] Network Address Group ID
    # @param body [NetworkAddressGroupUpdate] Parameters for the update of a Network Address Group
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkAddressGroup, Integer, Hash)>] NetworkAddressGroup data, response status code and response headers
    def v1_network_address_groups_id_put_with_http_info(network_address_group_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkAddressGroupsApi.v1_network_address_groups_id_put ...'
      end
      # verify the required parameter 'network_address_group_id' is set
      if @api_client.config.client_side_validation && network_address_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_address_group_id' when calling NetworkAddressGroupsApi.v1_network_address_groups_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NetworkAddressGroupsApi.v1_network_address_groups_id_put"
      end
      # resource path
      local_var_path = '/v1/network-address-groups/{network_address_group_id}'.sub('{' + 'network_address_group_id' + '}', CGI.escape(network_address_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkAddressGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkAddressGroupsApi.v1_network_address_groups_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkAddressGroupsApi#v1_network_address_groups_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the member from a Network Address Group
    # @param network_address_group_id [String] Network Address Group ID
    # @param network_address_group_member_id [String] The Network Address Group Member ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_network_address_groups_members_delete(network_address_group_id, network_address_group_member_id, opts = {})
      data, _status_code, _headers = v1_network_address_groups_members_delete_with_http_info(network_address_group_id, network_address_group_member_id, opts)
      data
    end

    # Delete the member from a Network Address Group
    # @param network_address_group_id [String] Network Address Group ID
    # @param network_address_group_member_id [String] The Network Address Group Member ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_network_address_groups_members_delete_with_http_info(network_address_group_id, network_address_group_member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkAddressGroupsApi.v1_network_address_groups_members_delete ...'
      end
      # verify the required parameter 'network_address_group_id' is set
      if @api_client.config.client_side_validation && network_address_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_address_group_id' when calling NetworkAddressGroupsApi.v1_network_address_groups_members_delete"
      end
      # verify the required parameter 'network_address_group_member_id' is set
      if @api_client.config.client_side_validation && network_address_group_member_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_address_group_member_id' when calling NetworkAddressGroupsApi.v1_network_address_groups_members_delete"
      end
      # resource path
      local_var_path = '/v1/network-address-groups/{network_address_group_id}/members/{network_address_group_member_id}'.sub('{' + 'network_address_group_id' + '}', CGI.escape(network_address_group_id.to_s)).sub('{' + 'network_address_group_member_id' + '}', CGI.escape(network_address_group_member_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkAddressGroupsApi.v1_network_address_groups_members_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkAddressGroupsApi#v1_network_address_groups_members_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a member to a Network Address Group
    # @param network_address_group_id [String] Network Address Group ID
    # @param body [NetworkAddressGroupAddMember] Parameters for adding a member to a Network Address Group
    # @param [Hash] opts the optional parameters
    # @return [NetworkAddressGroupMember]
    def v1_network_address_groups_members_post(network_address_group_id, body, opts = {})
      data, _status_code, _headers = v1_network_address_groups_members_post_with_http_info(network_address_group_id, body, opts)
      data
    end

    # Add a member to a Network Address Group
    # @param network_address_group_id [String] Network Address Group ID
    # @param body [NetworkAddressGroupAddMember] Parameters for adding a member to a Network Address Group
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkAddressGroupMember, Integer, Hash)>] NetworkAddressGroupMember data, response status code and response headers
    def v1_network_address_groups_members_post_with_http_info(network_address_group_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkAddressGroupsApi.v1_network_address_groups_members_post ...'
      end
      # verify the required parameter 'network_address_group_id' is set
      if @api_client.config.client_side_validation && network_address_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_address_group_id' when calling NetworkAddressGroupsApi.v1_network_address_groups_members_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NetworkAddressGroupsApi.v1_network_address_groups_members_post"
      end
      # resource path
      local_var_path = '/v1/network-address-groups/{network_address_group_id}/members'.sub('{' + 'network_address_group_id' + '}', CGI.escape(network_address_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkAddressGroupMember'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkAddressGroupsApi.v1_network_address_groups_members_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkAddressGroupsApi#v1_network_address_groups_members_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Network Address Group
    # @param body [NetworkAddressGroupCreate] Parameters for the creation of a Network Address Group
    # @param [Hash] opts the optional parameters
    # @return [NetworkAddressGroup]
    def v1_network_address_groups_post(body, opts = {})
      data, _status_code, _headers = v1_network_address_groups_post_with_http_info(body, opts)
      data
    end

    # Create a new Network Address Group
    # @param body [NetworkAddressGroupCreate] Parameters for the creation of a Network Address Group
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkAddressGroup, Integer, Hash)>] NetworkAddressGroup data, response status code and response headers
    def v1_network_address_groups_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkAddressGroupsApi.v1_network_address_groups_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NetworkAddressGroupsApi.v1_network_address_groups_post"
      end
      # resource path
      local_var_path = '/v1/network-address-groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkAddressGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkAddressGroupsApi.v1_network_address_groups_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkAddressGroupsApi#v1_network_address_groups_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
