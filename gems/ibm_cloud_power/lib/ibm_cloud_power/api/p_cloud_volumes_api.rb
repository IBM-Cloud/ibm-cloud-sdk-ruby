=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module IbmCloudPower
  class PCloudVolumesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Perform an action on a Volume
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volume_id [String] Volume ID
    # @param body [VolumeAction] Parameters for the desired action
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def pcloud_cloudinstances_volumes_action_post(cloud_instance_id, volume_id, body, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_volumes_action_post_with_http_info(cloud_instance_id, volume_id, body, opts)
      data
    end

    # Perform an action on a Volume
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volume_id [String] Volume ID
    # @param body [VolumeAction] Parameters for the desired action
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def pcloud_cloudinstances_volumes_action_post_with_http_info(cloud_instance_id, volume_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_cloudinstances_volumes_action_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_action_post"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_action_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_action_post"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/volumes/{volume_id}/action'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_cloudinstances_volumes_action_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_cloudinstances_volumes_action_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a cloud instance volume
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def pcloud_cloudinstances_volumes_delete(cloud_instance_id, volume_id, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_volumes_delete_with_http_info(cloud_instance_id, volume_id, opts)
      data
    end

    # Delete a cloud instance volume
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def pcloud_cloudinstances_volumes_delete_with_http_info(cloud_instance_id, volume_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_cloudinstances_volumes_delete ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_delete"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_delete"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/volumes/{volume_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_cloudinstances_volumes_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_cloudinstances_volumes_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of flashcopy mappings of a given volume
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Array<FlashCopyMapping>]
    def pcloud_cloudinstances_volumes_flash_copy_mappings_get(cloud_instance_id, volume_id, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_volumes_flash_copy_mappings_get_with_http_info(cloud_instance_id, volume_id, opts)
      data
    end

    # Get a list of flashcopy mappings of a given volume
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FlashCopyMapping>, Integer, Hash)>] Array<FlashCopyMapping> data, response status code and response headers
    def pcloud_cloudinstances_volumes_flash_copy_mappings_get_with_http_info(cloud_instance_id, volume_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_cloudinstances_volumes_flash_copy_mappings_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_flash_copy_mappings_get"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_flash_copy_mappings_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/volumes/{volume_id}/flash-copy-mappings'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<FlashCopyMapping>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_cloudinstances_volumes_flash_copy_mappings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_cloudinstances_volumes_flash_copy_mappings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detailed info of a volume
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Volume]
    def pcloud_cloudinstances_volumes_get(cloud_instance_id, volume_id, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_volumes_get_with_http_info(cloud_instance_id, volume_id, opts)
      data
    end

    # Detailed info of a volume
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Volume, Integer, Hash)>] Volume data, response status code and response headers
    def pcloud_cloudinstances_volumes_get_with_http_info(cloud_instance_id, volume_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_cloudinstances_volumes_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_get"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/volumes/{volume_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Volume'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_cloudinstances_volumes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_cloudinstances_volumes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all volumes for this cloud instance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :replication_enabled true or false, limits a volumes list to replication or non replication enabled volumes
    # @option opts [String] :affinity A pvmInstance (id or name), limits a volumes list response to only volumes that have affinity to the pvmInstance
    # @option opts [Boolean] :auxiliary true or false, limits a volume list to auxiliary or non auxiliary volumes
    # @return [Volumes]
    def pcloud_cloudinstances_volumes_getall(cloud_instance_id, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_volumes_getall_with_http_info(cloud_instance_id, opts)
      data
    end

    # List all volumes for this cloud instance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :replication_enabled true or false, limits a volumes list to replication or non replication enabled volumes
    # @option opts [String] :affinity A pvmInstance (id or name), limits a volumes list response to only volumes that have affinity to the pvmInstance
    # @option opts [Boolean] :auxiliary true or false, limits a volume list to auxiliary or non auxiliary volumes
    # @return [Array<(Volumes, Integer, Hash)>] Volumes data, response status code and response headers
    def pcloud_cloudinstances_volumes_getall_with_http_info(cloud_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_cloudinstances_volumes_getall ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_getall"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/volumes'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'replicationEnabled'] = opts[:'replication_enabled'] if !opts[:'replication_enabled'].nil?
      query_params[:'affinity'] = opts[:'affinity'] if !opts[:'affinity'].nil?
      query_params[:'auxiliary'] = opts[:'auxiliary'] if !opts[:'auxiliary'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Volumes'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_cloudinstances_volumes_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_cloudinstances_volumes_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new data Volume
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [CreateDataVolume] Parameters for the creation of a new data volume
    # @param [Hash] opts the optional parameters
    # @return [Volume]
    def pcloud_cloudinstances_volumes_post(cloud_instance_id, body, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_volumes_post_with_http_info(cloud_instance_id, body, opts)
      data
    end

    # Create a new data Volume
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [CreateDataVolume] Parameters for the creation of a new data volume
    # @param [Hash] opts the optional parameters
    # @return [Array<(Volume, Integer, Hash)>] Volume data, response status code and response headers
    def pcloud_cloudinstances_volumes_post_with_http_info(cloud_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_cloudinstances_volumes_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_post"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/volumes'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Volume'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_cloudinstances_volumes_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_cloudinstances_volumes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a cloud instance volume
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volume_id [String] Volume ID
    # @param body [UpdateVolume] Parameters to update a cloud instance volume
    # @param [Hash] opts the optional parameters
    # @return [Volume]
    def pcloud_cloudinstances_volumes_put(cloud_instance_id, volume_id, body, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_volumes_put_with_http_info(cloud_instance_id, volume_id, body, opts)
      data
    end

    # Update a cloud instance volume
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volume_id [String] Volume ID
    # @param body [UpdateVolume] Parameters to update a cloud instance volume
    # @param [Hash] opts the optional parameters
    # @return [Array<(Volume, Integer, Hash)>] Volume data, response status code and response headers
    def pcloud_cloudinstances_volumes_put_with_http_info(cloud_instance_id, volume_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_cloudinstances_volumes_put ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_put"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_put"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/volumes/{volume_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Volume'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_cloudinstances_volumes_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_cloudinstances_volumes_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get remote copy relationship of a volume
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [VolumeRemoteCopyRelationship]
    def pcloud_cloudinstances_volumes_remote_copy_relationship_get(cloud_instance_id, volume_id, opts = {})
      data, _status_code, _headers = pcloud_cloudinstances_volumes_remote_copy_relationship_get_with_http_info(cloud_instance_id, volume_id, opts)
      data
    end

    # Get remote copy relationship of a volume
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(VolumeRemoteCopyRelationship, Integer, Hash)>] VolumeRemoteCopyRelationship data, response status code and response headers
    def pcloud_cloudinstances_volumes_remote_copy_relationship_get_with_http_info(cloud_instance_id, volume_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_cloudinstances_volumes_remote_copy_relationship_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_remote_copy_relationship_get"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling PCloudVolumesApi.pcloud_cloudinstances_volumes_remote_copy_relationship_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/volumes/{volume_id}/remote-copy'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VolumeRemoteCopyRelationship'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_cloudinstances_volumes_remote_copy_relationship_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_cloudinstances_volumes_remote_copy_relationship_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detach a volume from a PVMInstance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def pcloud_pvminstances_volumes_delete(cloud_instance_id, pvm_instance_id, volume_id, opts = {})
      data, _status_code, _headers = pcloud_pvminstances_volumes_delete_with_http_info(cloud_instance_id, pvm_instance_id, volume_id, opts)
      data
    end

    # Detach a volume from a PVMInstance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def pcloud_pvminstances_volumes_delete_with_http_info(cloud_instance_id, pvm_instance_id, volume_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_pvminstances_volumes_delete ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_delete"
      end
      # verify the required parameter 'pvm_instance_id' is set
      if @api_client.config.client_side_validation && pvm_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'pvm_instance_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_delete"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_delete"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/volumes/{volume_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'pvm_instance_id' + '}', CGI.escape(pvm_instance_id.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_pvminstances_volumes_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_pvminstances_volumes_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detailed info of a volume attached to a PVMInstance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Volume]
    def pcloud_pvminstances_volumes_get(cloud_instance_id, pvm_instance_id, volume_id, opts = {})
      data, _status_code, _headers = pcloud_pvminstances_volumes_get_with_http_info(cloud_instance_id, pvm_instance_id, volume_id, opts)
      data
    end

    # Detailed info of a volume attached to a PVMInstance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Volume, Integer, Hash)>] Volume data, response status code and response headers
    def pcloud_pvminstances_volumes_get_with_http_info(cloud_instance_id, pvm_instance_id, volume_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_pvminstances_volumes_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_get"
      end
      # verify the required parameter 'pvm_instance_id' is set
      if @api_client.config.client_side_validation && pvm_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'pvm_instance_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_get"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/volumes/{volume_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'pvm_instance_id' + '}', CGI.escape(pvm_instance_id.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Volume'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_pvminstances_volumes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_pvminstances_volumes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all volumes attached to a PVM Instance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param [Hash] opts the optional parameters
    # @return [Volumes]
    def pcloud_pvminstances_volumes_getall(cloud_instance_id, pvm_instance_id, opts = {})
      data, _status_code, _headers = pcloud_pvminstances_volumes_getall_with_http_info(cloud_instance_id, pvm_instance_id, opts)
      data
    end

    # List all volumes attached to a PVM Instance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Volumes, Integer, Hash)>] Volumes data, response status code and response headers
    def pcloud_pvminstances_volumes_getall_with_http_info(cloud_instance_id, pvm_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_pvminstances_volumes_getall ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_getall"
      end
      # verify the required parameter 'pvm_instance_id' is set
      if @api_client.config.client_side_validation && pvm_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'pvm_instance_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_getall"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/volumes'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'pvm_instance_id' + '}', CGI.escape(pvm_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Volumes'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_pvminstances_volumes_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_pvminstances_volumes_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Attach a volume to a PVMInstance
    # Attach a volume to a PVMInstance. >**Note**: Recommended for attaching data volumes. In the case of VMRM, it is recommended to use the 'Attach all volumes to a PVM instance' API for attaching the first boot volume.
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def pcloud_pvminstances_volumes_post(cloud_instance_id, pvm_instance_id, volume_id, opts = {})
      data, _status_code, _headers = pcloud_pvminstances_volumes_post_with_http_info(cloud_instance_id, pvm_instance_id, volume_id, opts)
      data
    end

    # Attach a volume to a PVMInstance
    # Attach a volume to a PVMInstance. &gt;**Note**: Recommended for attaching data volumes. In the case of VMRM, it is recommended to use the &#39;Attach all volumes to a PVM instance&#39; API for attaching the first boot volume.
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def pcloud_pvminstances_volumes_post_with_http_info(cloud_instance_id, pvm_instance_id, volume_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_pvminstances_volumes_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_post"
      end
      # verify the required parameter 'pvm_instance_id' is set
      if @api_client.config.client_side_validation && pvm_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'pvm_instance_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_post"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_post"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/volumes/{volume_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'pvm_instance_id' + '}', CGI.escape(pvm_instance_id.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_pvminstances_volumes_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_pvminstances_volumes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a volume attached to a PVMInstance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param volume_id [String] Volume ID
    # @param body [PVMInstanceVolumeUpdate] Parameters to update a volume attached to a PVMInstance
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def pcloud_pvminstances_volumes_put(cloud_instance_id, pvm_instance_id, volume_id, body, opts = {})
      data, _status_code, _headers = pcloud_pvminstances_volumes_put_with_http_info(cloud_instance_id, pvm_instance_id, volume_id, body, opts)
      data
    end

    # Update a volume attached to a PVMInstance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param volume_id [String] Volume ID
    # @param body [PVMInstanceVolumeUpdate] Parameters to update a volume attached to a PVMInstance
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def pcloud_pvminstances_volumes_put_with_http_info(cloud_instance_id, pvm_instance_id, volume_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_pvminstances_volumes_put ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_put"
      end
      # verify the required parameter 'pvm_instance_id' is set
      if @api_client.config.client_side_validation && pvm_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'pvm_instance_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_put"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_put"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/volumes/{volume_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'pvm_instance_id' + '}', CGI.escape(pvm_instance_id.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_pvminstances_volumes_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_pvminstances_volumes_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the PVMInstance volume as the boot volume
    # Set the PVMInstance volume as the boot volume. >**Note**: If a non-bootable volume is provided, it will be converted to a bootable volume and then attached.
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def pcloud_pvminstances_volumes_setboot_put(cloud_instance_id, pvm_instance_id, volume_id, opts = {})
      data, _status_code, _headers = pcloud_pvminstances_volumes_setboot_put_with_http_info(cloud_instance_id, pvm_instance_id, volume_id, opts)
      data
    end

    # Set the PVMInstance volume as the boot volume
    # Set the PVMInstance volume as the boot volume. &gt;**Note**: If a non-bootable volume is provided, it will be converted to a bootable volume and then attached.
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param volume_id [String] Volume ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def pcloud_pvminstances_volumes_setboot_put_with_http_info(cloud_instance_id, pvm_instance_id, volume_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_pvminstances_volumes_setboot_put ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_setboot_put"
      end
      # verify the required parameter 'pvm_instance_id' is set
      if @api_client.config.client_side_validation && pvm_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'pvm_instance_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_setboot_put"
      end
      # verify the required parameter 'volume_id' is set
      if @api_client.config.client_side_validation && volume_id.nil?
        fail ArgumentError, "Missing the required parameter 'volume_id' when calling PCloudVolumesApi.pcloud_pvminstances_volumes_setboot_put"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/volumes/{volume_id}/setboot'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'pvm_instance_id' + '}', CGI.escape(pvm_instance_id.to_s)).sub('{' + 'volume_id' + '}', CGI.escape(volume_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_pvminstances_volumes_setboot_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_pvminstances_volumes_setboot_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detach multiple volumes from a PVMInstance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param body [VolumesDetach] Parameter to detach multiple volumes from a PVMInstance
    # @param [Hash] opts the optional parameters
    # @return [VolumesDetachmentResponse]
    def pcloud_v2_pvminstances_volumes_delete(cloud_instance_id, pvm_instance_id, body, opts = {})
      data, _status_code, _headers = pcloud_v2_pvminstances_volumes_delete_with_http_info(cloud_instance_id, pvm_instance_id, body, opts)
      data
    end

    # Detach multiple volumes from a PVMInstance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param body [VolumesDetach] Parameter to detach multiple volumes from a PVMInstance
    # @param [Hash] opts the optional parameters
    # @return [Array<(VolumesDetachmentResponse, Integer, Hash)>] VolumesDetachmentResponse data, response status code and response headers
    def pcloud_v2_pvminstances_volumes_delete_with_http_info(cloud_instance_id, pvm_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_v2_pvminstances_volumes_delete ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_v2_pvminstances_volumes_delete"
      end
      # verify the required parameter 'pvm_instance_id' is set
      if @api_client.config.client_side_validation && pvm_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'pvm_instance_id' when calling PCloudVolumesApi.pcloud_v2_pvminstances_volumes_delete"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVolumesApi.pcloud_v2_pvminstances_volumes_delete"
      end
      # resource path
      local_var_path = '/pcloud/v2/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/volumes'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'pvm_instance_id' + '}', CGI.escape(pvm_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'VolumesDetachmentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_v2_pvminstances_volumes_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_v2_pvminstances_volumes_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Attach all volumes to a PVMInstance
    # Attach all volumes to a PVMInstance. >**Note**: In the case of VMRM, if a single volume ID is provided in the 'volumeIDs' field, that volume will be converted to a bootable volume and then attached.
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param body [VolumesAttach] Parameter to attach volumes to a PVMInstance
    # @param [Hash] opts the optional parameters
    # @return [VolumesAttachmentResponse]
    def pcloud_v2_pvminstances_volumes_post(cloud_instance_id, pvm_instance_id, body, opts = {})
      data, _status_code, _headers = pcloud_v2_pvminstances_volumes_post_with_http_info(cloud_instance_id, pvm_instance_id, body, opts)
      data
    end

    # Attach all volumes to a PVMInstance
    # Attach all volumes to a PVMInstance. &gt;**Note**: In the case of VMRM, if a single volume ID is provided in the &#39;volumeIDs&#39; field, that volume will be converted to a bootable volume and then attached.
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param pvm_instance_id [String] PCloud PVM Instance ID
    # @param body [VolumesAttach] Parameter to attach volumes to a PVMInstance
    # @param [Hash] opts the optional parameters
    # @return [Array<(VolumesAttachmentResponse, Integer, Hash)>] VolumesAttachmentResponse data, response status code and response headers
    def pcloud_v2_pvminstances_volumes_post_with_http_info(cloud_instance_id, pvm_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_v2_pvminstances_volumes_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_v2_pvminstances_volumes_post"
      end
      # verify the required parameter 'pvm_instance_id' is set
      if @api_client.config.client_side_validation && pvm_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'pvm_instance_id' when calling PCloudVolumesApi.pcloud_v2_pvminstances_volumes_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVolumesApi.pcloud_v2_pvminstances_volumes_post"
      end
      # resource path
      local_var_path = '/pcloud/v2/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/volumes'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'pvm_instance_id' + '}', CGI.escape(pvm_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'VolumesAttachmentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_v2_pvminstances_volumes_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_v2_pvminstances_volumes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a volume clone for specified volumes
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [VolumesCloneAsyncRequest] Parameters for the cloning of volumes
    # @param [Hash] opts the optional parameters
    # @return [CloneTaskReference]
    def pcloud_v2_volumes_clone_post(cloud_instance_id, body, opts = {})
      data, _status_code, _headers = pcloud_v2_volumes_clone_post_with_http_info(cloud_instance_id, body, opts)
      data
    end

    # Create a volume clone for specified volumes
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [VolumesCloneAsyncRequest] Parameters for the cloning of volumes
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloneTaskReference, Integer, Hash)>] CloneTaskReference data, response status code and response headers
    def pcloud_v2_volumes_clone_post_with_http_info(cloud_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_v2_volumes_clone_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_v2_volumes_clone_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVolumesApi.pcloud_v2_volumes_clone_post"
      end
      # resource path
      local_var_path = '/pcloud/v2/cloud-instances/{cloud_instance_id}/volumes/clone'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CloneTaskReference'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_v2_volumes_clone_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_v2_volumes_clone_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the status of a volumes clone request for the specified clone task ID
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param clone_task_id [String] Volumes Clone Task ID
    # @param [Hash] opts the optional parameters
    # @return [CloneTaskStatus]
    def pcloud_v2_volumes_clonetasks_get(cloud_instance_id, clone_task_id, opts = {})
      data, _status_code, _headers = pcloud_v2_volumes_clonetasks_get_with_http_info(cloud_instance_id, clone_task_id, opts)
      data
    end

    # Get the status of a volumes clone request for the specified clone task ID
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param clone_task_id [String] Volumes Clone Task ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloneTaskStatus, Integer, Hash)>] CloneTaskStatus data, response status code and response headers
    def pcloud_v2_volumes_clonetasks_get_with_http_info(cloud_instance_id, clone_task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_v2_volumes_clonetasks_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_v2_volumes_clonetasks_get"
      end
      # verify the required parameter 'clone_task_id' is set
      if @api_client.config.client_side_validation && clone_task_id.nil?
        fail ArgumentError, "Missing the required parameter 'clone_task_id' when calling PCloudVolumesApi.pcloud_v2_volumes_clonetasks_get"
      end
      # resource path
      local_var_path = '/pcloud/v2/cloud-instances/{cloud_instance_id}/volumes/clone-tasks/{clone_task_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'clone_task_id' + '}', CGI.escape(clone_task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'percentComplete', 'status']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloneTaskStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_v2_volumes_clonetasks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_v2_volumes_clonetasks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all volumes
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [VolumesDelete] Parameters to delete volumes
    # @param [Hash] opts the optional parameters
    # @return [VolumesDeleteResponse]
    def pcloud_v2_volumes_delete(cloud_instance_id, body, opts = {})
      data, _status_code, _headers = pcloud_v2_volumes_delete_with_http_info(cloud_instance_id, body, opts)
      data
    end

    # Delete all volumes
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [VolumesDelete] Parameters to delete volumes
    # @param [Hash] opts the optional parameters
    # @return [Array<(VolumesDeleteResponse, Integer, Hash)>] VolumesDeleteResponse data, response status code and response headers
    def pcloud_v2_volumes_delete_with_http_info(cloud_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_v2_volumes_delete ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_v2_volumes_delete"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVolumesApi.pcloud_v2_volumes_delete"
      end
      # resource path
      local_var_path = '/pcloud/v2/cloud-instances/{cloud_instance_id}/volumes'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'VolumesDeleteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_v2_volumes_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_v2_volumes_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create multiple data volumes from a single definition
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [MultiVolumesCreate] Parameters for creating multiple volumes
    # @param [Hash] opts the optional parameters
    # @return [Volumes]
    def pcloud_v2_volumes_post(cloud_instance_id, body, opts = {})
      data, _status_code, _headers = pcloud_v2_volumes_post_with_http_info(cloud_instance_id, body, opts)
      data
    end

    # Create multiple data volumes from a single definition
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [MultiVolumesCreate] Parameters for creating multiple volumes
    # @param [Hash] opts the optional parameters
    # @return [Array<(Volumes, Integer, Hash)>] Volumes data, response status code and response headers
    def pcloud_v2_volumes_post_with_http_info(cloud_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_v2_volumes_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_v2_volumes_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVolumesApi.pcloud_v2_volumes_post"
      end
      # resource path
      local_var_path = '/pcloud/v2/cloud-instances/{cloud_instance_id}/volumes'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Volumes'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_v2_volumes_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_v2_volumes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel a volumes-clone request 
    # Initiates the cleanup action that performs the cleanup of the preparatory clones and snapshot volumes.
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volumes_clone_id [String] Volumes Clone ID
    # @param [Hash] opts the optional parameters
    # @option opts [VolumesCloneCancel] :body Parameters for cancelling a volumes-clone request
    # @return [VolumesClone]
    def pcloud_v2_volumesclone_cancel_post(cloud_instance_id, volumes_clone_id, opts = {})
      data, _status_code, _headers = pcloud_v2_volumesclone_cancel_post_with_http_info(cloud_instance_id, volumes_clone_id, opts)
      data
    end

    # Cancel a volumes-clone request 
    # Initiates the cleanup action that performs the cleanup of the preparatory clones and snapshot volumes.
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volumes_clone_id [String] Volumes Clone ID
    # @param [Hash] opts the optional parameters
    # @option opts [VolumesCloneCancel] :body Parameters for cancelling a volumes-clone request
    # @return [Array<(VolumesClone, Integer, Hash)>] VolumesClone data, response status code and response headers
    def pcloud_v2_volumesclone_cancel_post_with_http_info(cloud_instance_id, volumes_clone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_v2_volumesclone_cancel_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_v2_volumesclone_cancel_post"
      end
      # verify the required parameter 'volumes_clone_id' is set
      if @api_client.config.client_side_validation && volumes_clone_id.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_clone_id' when calling PCloudVolumesApi.pcloud_v2_volumesclone_cancel_post"
      end
      # resource path
      local_var_path = '/pcloud/v2/cloud-instances/{cloud_instance_id}/volumes-clone/{volumes_clone_id}/cancel'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'volumes_clone_id' + '}', CGI.escape(volumes_clone_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'VolumesClone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_v2_volumesclone_cancel_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_v2_volumesclone_cancel_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a volumes-clone request
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volumes_clone_id [String] Volumes Clone ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def pcloud_v2_volumesclone_delete(cloud_instance_id, volumes_clone_id, opts = {})
      data, _status_code, _headers = pcloud_v2_volumesclone_delete_with_http_info(cloud_instance_id, volumes_clone_id, opts)
      data
    end

    # Delete a volumes-clone request
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volumes_clone_id [String] Volumes Clone ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def pcloud_v2_volumesclone_delete_with_http_info(cloud_instance_id, volumes_clone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_v2_volumesclone_delete ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_v2_volumesclone_delete"
      end
      # verify the required parameter 'volumes_clone_id' is set
      if @api_client.config.client_side_validation && volumes_clone_id.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_clone_id' when calling PCloudVolumesApi.pcloud_v2_volumesclone_delete"
      end
      # resource path
      local_var_path = '/pcloud/v2/cloud-instances/{cloud_instance_id}/volumes-clone/{volumes_clone_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'volumes_clone_id' + '}', CGI.escape(volumes_clone_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_v2_volumesclone_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_v2_volumesclone_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate the Execute action for a volumes-clone request 
    # Execute action creates the cloned volumes using the volume snapshots.
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volumes_clone_id [String] Volumes Clone ID
    # @param body [VolumesCloneExecute] Parameters for the cloning of volumes
    # @param [Hash] opts the optional parameters
    # @return [VolumesClone]
    def pcloud_v2_volumesclone_execute_post(cloud_instance_id, volumes_clone_id, body, opts = {})
      data, _status_code, _headers = pcloud_v2_volumesclone_execute_post_with_http_info(cloud_instance_id, volumes_clone_id, body, opts)
      data
    end

    # Initiate the Execute action for a volumes-clone request 
    # Execute action creates the cloned volumes using the volume snapshots.
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volumes_clone_id [String] Volumes Clone ID
    # @param body [VolumesCloneExecute] Parameters for the cloning of volumes
    # @param [Hash] opts the optional parameters
    # @return [Array<(VolumesClone, Integer, Hash)>] VolumesClone data, response status code and response headers
    def pcloud_v2_volumesclone_execute_post_with_http_info(cloud_instance_id, volumes_clone_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_v2_volumesclone_execute_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_v2_volumesclone_execute_post"
      end
      # verify the required parameter 'volumes_clone_id' is set
      if @api_client.config.client_side_validation && volumes_clone_id.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_clone_id' when calling PCloudVolumesApi.pcloud_v2_volumesclone_execute_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVolumesApi.pcloud_v2_volumesclone_execute_post"
      end
      # resource path
      local_var_path = '/pcloud/v2/cloud-instances/{cloud_instance_id}/volumes-clone/{volumes_clone_id}/execute'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'volumes_clone_id' + '}', CGI.escape(volumes_clone_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'VolumesClone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_v2_volumesclone_execute_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_v2_volumesclone_execute_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the details for a volumes-clone request
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volumes_clone_id [String] Volumes Clone ID
    # @param [Hash] opts the optional parameters
    # @return [VolumesCloneDetail]
    def pcloud_v2_volumesclone_get(cloud_instance_id, volumes_clone_id, opts = {})
      data, _status_code, _headers = pcloud_v2_volumesclone_get_with_http_info(cloud_instance_id, volumes_clone_id, opts)
      data
    end

    # Get the details for a volumes-clone request
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volumes_clone_id [String] Volumes Clone ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(VolumesCloneDetail, Integer, Hash)>] VolumesCloneDetail data, response status code and response headers
    def pcloud_v2_volumesclone_get_with_http_info(cloud_instance_id, volumes_clone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_v2_volumesclone_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_v2_volumesclone_get"
      end
      # verify the required parameter 'volumes_clone_id' is set
      if @api_client.config.client_side_validation && volumes_clone_id.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_clone_id' when calling PCloudVolumesApi.pcloud_v2_volumesclone_get"
      end
      # resource path
      local_var_path = '/pcloud/v2/cloud-instances/{cloud_instance_id}/volumes-clone/{volumes_clone_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'volumes_clone_id' + '}', CGI.escape(volumes_clone_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VolumesCloneDetail'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_v2_volumesclone_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_v2_volumesclone_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of volumes-clone request for a cloud instance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter volumes-clone filter to limit list items:   prepare - includes status values (preparing, prepared)   start   - includes status values (starting, available)   execute - includes status values (executing, available-rollback)   cancel  - includes status values (cancelling)   completed - includes status values (completed)   failed - includes status values (failed)   cancelled - includes status values (cancelled)   finalized - included status values (completed, failed, cancelled) 
    # @return [VolumesClones]
    def pcloud_v2_volumesclone_getall(cloud_instance_id, opts = {})
      data, _status_code, _headers = pcloud_v2_volumesclone_getall_with_http_info(cloud_instance_id, opts)
      data
    end

    # Get the list of volumes-clone request for a cloud instance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter volumes-clone filter to limit list items:   prepare - includes status values (preparing, prepared)   start   - includes status values (starting, available)   execute - includes status values (executing, available-rollback)   cancel  - includes status values (cancelling)   completed - includes status values (completed)   failed - includes status values (failed)   cancelled - includes status values (cancelled)   finalized - included status values (completed, failed, cancelled) 
    # @return [Array<(VolumesClones, Integer, Hash)>] VolumesClones data, response status code and response headers
    def pcloud_v2_volumesclone_getall_with_http_info(cloud_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_v2_volumesclone_getall ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_v2_volumesclone_getall"
      end
      allowable_values = ["prepare", "start", "execute", "cancel", "completed", "failed", "cancelled", "finalized"]
      if @api_client.config.client_side_validation && opts[:'filter'] && !allowable_values.include?(opts[:'filter'])
        fail ArgumentError, "invalid value for \"filter\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/pcloud/v2/cloud-instances/{cloud_instance_id}/volumes-clone'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VolumesClones'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_v2_volumesclone_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_v2_volumesclone_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new volumes clone request and initiates the Prepare action 
    # Requires a minimum of two volumes. Requires a minimum of one volume to be in the `in-use` state. Requires a unique volumes clone name. Prepare action does the preparatory work for creating the snapshot volumes. >**Note**: If there is an existing prepare, user cannot trigger another prepare for the same set of volumes. Prepare should be followed by start and execute. If existing prepare does not have to be used then it should be first cancelled before the next prepare operation. 
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [VolumesCloneCreate] Parameters for preparing a set of volumes to be cloned
    # @param [Hash] opts the optional parameters
    # @return [VolumesClone]
    def pcloud_v2_volumesclone_post(cloud_instance_id, body, opts = {})
      data, _status_code, _headers = pcloud_v2_volumesclone_post_with_http_info(cloud_instance_id, body, opts)
      data
    end

    # Create a new volumes clone request and initiates the Prepare action 
    # Requires a minimum of two volumes. Requires a minimum of one volume to be in the &#x60;in-use&#x60; state. Requires a unique volumes clone name. Prepare action does the preparatory work for creating the snapshot volumes. &gt;**Note**: If there is an existing prepare, user cannot trigger another prepare for the same set of volumes. Prepare should be followed by start and execute. If existing prepare does not have to be used then it should be first cancelled before the next prepare operation. 
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [VolumesCloneCreate] Parameters for preparing a set of volumes to be cloned
    # @param [Hash] opts the optional parameters
    # @return [Array<(VolumesClone, Integer, Hash)>] VolumesClone data, response status code and response headers
    def pcloud_v2_volumesclone_post_with_http_info(cloud_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_v2_volumesclone_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_v2_volumesclone_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVolumesApi.pcloud_v2_volumesclone_post"
      end
      # resource path
      local_var_path = '/pcloud/v2/cloud-instances/{cloud_instance_id}/volumes-clone'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'VolumesClone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_v2_volumesclone_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_v2_volumesclone_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate the Start action for a volumes-clone request 
    # Start action starts the consistency group to initiate the flash copy.
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volumes_clone_id [String] Volumes Clone ID
    # @param [Hash] opts the optional parameters
    # @return [VolumesClone]
    def pcloud_v2_volumesclone_start_post(cloud_instance_id, volumes_clone_id, opts = {})
      data, _status_code, _headers = pcloud_v2_volumesclone_start_post_with_http_info(cloud_instance_id, volumes_clone_id, opts)
      data
    end

    # Initiate the Start action for a volumes-clone request 
    # Start action starts the consistency group to initiate the flash copy.
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param volumes_clone_id [String] Volumes Clone ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(VolumesClone, Integer, Hash)>] VolumesClone data, response status code and response headers
    def pcloud_v2_volumesclone_start_post_with_http_info(cloud_instance_id, volumes_clone_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_v2_volumesclone_start_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_v2_volumesclone_start_post"
      end
      # verify the required parameter 'volumes_clone_id' is set
      if @api_client.config.client_side_validation && volumes_clone_id.nil?
        fail ArgumentError, "Missing the required parameter 'volumes_clone_id' when calling PCloudVolumesApi.pcloud_v2_volumesclone_start_post"
      end
      # resource path
      local_var_path = '/pcloud/v2/cloud-instances/{cloud_instance_id}/volumes-clone/{volumes_clone_id}/start'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'volumes_clone_id' + '}', CGI.escape(volumes_clone_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VolumesClone'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_v2_volumesclone_start_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_v2_volumesclone_start_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a volume clone for specified volumes
    # This API is deprecated, use v2 clone API to perform the volume clone.  >*Note*: Support for this API will be available till 31st March 2023. 
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [VolumesCloneRequest] Parameters for the cloning of volumes
    # @param [Hash] opts the optional parameters
    # @return [VolumesCloneResponse]
    def pcloud_volumes_clone_post(cloud_instance_id, body, opts = {})
      data, _status_code, _headers = pcloud_volumes_clone_post_with_http_info(cloud_instance_id, body, opts)
      data
    end

    # Create a volume clone for specified volumes
    # This API is deprecated, use v2 clone API to perform the volume clone.  &gt;*Note*: Support for this API will be available till 31st March 2023. 
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [VolumesCloneRequest] Parameters for the cloning of volumes
    # @param [Hash] opts the optional parameters
    # @return [Array<(VolumesCloneResponse, Integer, Hash)>] VolumesCloneResponse data, response status code and response headers
    def pcloud_volumes_clone_post_with_http_info(cloud_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVolumesApi.pcloud_volumes_clone_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVolumesApi.pcloud_volumes_clone_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVolumesApi.pcloud_volumes_clone_post"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/volumes/clone'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'VolumesCloneResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVolumesApi.pcloud_volumes_clone_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVolumesApi#pcloud_volumes_clone_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
