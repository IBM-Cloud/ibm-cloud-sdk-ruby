=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module IbmCloudPower
  class DatacentersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a Datacenter's information and capabilities
    # @param datacenter_region [String] Datacenter Region
    # @param [Hash] opts the optional parameters
    # @return [Datacenter]
    def v1_datacenters_get(datacenter_region, opts = {})
      data, _status_code, _headers = v1_datacenters_get_with_http_info(datacenter_region, opts)
      data
    end

    # Get a Datacenter&#39;s information and capabilities
    # @param datacenter_region [String] Datacenter Region
    # @param [Hash] opts the optional parameters
    # @return [Array<(Datacenter, Integer, Hash)>] Datacenter data, response status code and response headers
    def v1_datacenters_get_with_http_info(datacenter_region, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatacentersApi.v1_datacenters_get ...'
      end
      # verify the required parameter 'datacenter_region' is set
      if @api_client.config.client_side_validation && datacenter_region.nil?
        fail ArgumentError, "Missing the required parameter 'datacenter_region' when calling DatacentersApi.v1_datacenters_get"
      end
      # resource path
      local_var_path = '/v1/datacenters/{datacenter_region}'.sub('{' + 'datacenter_region' + '}', CGI.escape(datacenter_region.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Datacenter'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DatacentersApi.v1_datacenters_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatacentersApi#v1_datacenters_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Datacenters information and capabilities
    # @param [Hash] opts the optional parameters
    # @return [Datacenters]
    def v1_datacenters_getall(opts = {})
      data, _status_code, _headers = v1_datacenters_getall_with_http_info(opts)
      data
    end

    # Get all Datacenters information and capabilities
    # @param [Hash] opts the optional parameters
    # @return [Array<(Datacenters, Integer, Hash)>] Datacenters data, response status code and response headers
    def v1_datacenters_getall_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatacentersApi.v1_datacenters_getall ...'
      end
      # resource path
      local_var_path = '/v1/datacenters'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Datacenters'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DatacentersApi.v1_datacenters_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatacentersApi#v1_datacenters_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a private Datacenter's information and capabilities
    # @param datacenter_region [String] Datacenter Region
    # @param [Hash] opts the optional parameters
    # @return [Datacenter]
    def v1_datacenters_private_get(datacenter_region, opts = {})
      data, _status_code, _headers = v1_datacenters_private_get_with_http_info(datacenter_region, opts)
      data
    end

    # Get a private Datacenter&#39;s information and capabilities
    # @param datacenter_region [String] Datacenter Region
    # @param [Hash] opts the optional parameters
    # @return [Array<(Datacenter, Integer, Hash)>] Datacenter data, response status code and response headers
    def v1_datacenters_private_get_with_http_info(datacenter_region, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatacentersApi.v1_datacenters_private_get ...'
      end
      # verify the required parameter 'datacenter_region' is set
      if @api_client.config.client_side_validation && datacenter_region.nil?
        fail ArgumentError, "Missing the required parameter 'datacenter_region' when calling DatacentersApi.v1_datacenters_private_get"
      end
      # resource path
      local_var_path = '/v1/datacenters/private/{datacenter_region}'.sub('{' + 'datacenter_region' + '}', CGI.escape(datacenter_region.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Datacenter'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"DatacentersApi.v1_datacenters_private_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatacentersApi#v1_datacenters_private_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get private Datacenter information and capabilities
    # @param [Hash] opts the optional parameters
    # @return [Datacenters]
    def v1_datacenters_private_getall(opts = {})
      data, _status_code, _headers = v1_datacenters_private_getall_with_http_info(opts)
      data
    end

    # Get private Datacenter information and capabilities
    # @param [Hash] opts the optional parameters
    # @return [Array<(Datacenters, Integer, Hash)>] Datacenters data, response status code and response headers
    def v1_datacenters_private_getall_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DatacentersApi.v1_datacenters_private_getall ...'
      end
      # resource path
      local_var_path = '/v1/datacenters/private'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Datacenters'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"DatacentersApi.v1_datacenters_private_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DatacentersApi#v1_datacenters_private_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
