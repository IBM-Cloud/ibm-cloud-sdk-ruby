=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module IbmCloudPower
  class SnapshotsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the detail of a snapshot
    # This API is deprecated for /v1/snapshots. The API v1/volume-snapshots has replaced this endpoint.  View the usage of a snapshot. The snapshot may take time sync because the data is cached. 
    # @param snapshot_id [String] PVM Instance snapshot id
    # @param [Hash] opts the optional parameters
    # @return [SnapshotV1]
    def v1_snapshots_get(snapshot_id, opts = {})
      data, _status_code, _headers = v1_snapshots_get_with_http_info(snapshot_id, opts)
      data
    end

    # Get the detail of a snapshot
    # This API is deprecated for /v1/snapshots. The API v1/volume-snapshots has replaced this endpoint.  View the usage of a snapshot. The snapshot may take time sync because the data is cached. 
    # @param snapshot_id [String] PVM Instance snapshot id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SnapshotV1, Integer, Hash)>] SnapshotV1 data, response status code and response headers
    def v1_snapshots_get_with_http_info(snapshot_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnapshotsApi.v1_snapshots_get ...'
      end
      # verify the required parameter 'snapshot_id' is set
      if @api_client.config.client_side_validation && snapshot_id.nil?
        fail ArgumentError, "Missing the required parameter 'snapshot_id' when calling SnapshotsApi.v1_snapshots_get"
      end
      # resource path
      local_var_path = '/v1/snapshots/{snapshot_id}'.sub('{' + 'snapshot_id' + '}', CGI.escape(snapshot_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SnapshotV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"SnapshotsApi.v1_snapshots_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotsApi#v1_snapshots_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all the snapshots on a workspace
    # This API is deprecated for /v1/snapshots. The API v1/volume-snapshots has replaced this endpoint.  View the usage of snapshots on the workspace. The snapshots may take time sync because the data is cached. 
    # @param [Hash] opts the optional parameters
    # @return [SnapshotList]
    def v1_snapshots_getall(opts = {})
      data, _status_code, _headers = v1_snapshots_getall_with_http_info(opts)
      data
    end

    # Get a list of all the snapshots on a workspace
    # This API is deprecated for /v1/snapshots. The API v1/volume-snapshots has replaced this endpoint.  View the usage of snapshots on the workspace. The snapshots may take time sync because the data is cached. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SnapshotList, Integer, Hash)>] SnapshotList data, response status code and response headers
    def v1_snapshots_getall_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnapshotsApi.v1_snapshots_getall ...'
      end
      # resource path
      local_var_path = '/v1/snapshots'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SnapshotList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"SnapshotsApi.v1_snapshots_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotsApi#v1_snapshots_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of volume snapshots on a workspace
    # View the usage of volume snapshots on the workspace. The volume snapshots may take time sync because the data is cached.
    # @param [Hash] opts the optional parameters
    # @return [VolumeSnapshotList]
    def v1_volume_snapshots_get(opts = {})
      data, _status_code, _headers = v1_volume_snapshots_get_with_http_info(opts)
      data
    end

    # Get the list of volume snapshots on a workspace
    # View the usage of volume snapshots on the workspace. The volume snapshots may take time sync because the data is cached.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VolumeSnapshotList, Integer, Hash)>] VolumeSnapshotList data, response status code and response headers
    def v1_volume_snapshots_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnapshotsApi.v1_volume_snapshots_get ...'
      end
      # resource path
      local_var_path = '/v1/volume-snapshots'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VolumeSnapshotList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"SnapshotsApi.v1_volume_snapshots_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotsApi#v1_volume_snapshots_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the detail of a volume snapshot
    # View the usage of a snapshot. The snapshot may take time sync because the data is cached.
    # @param volume_snapshot_uuid [String] The volume snapshot UUID
    # @param [Hash] opts the optional parameters
    # @return [SnapshotV1]
    def v1_volume_snapshots_getall(volume_snapshot_uuid, opts = {})
      data, _status_code, _headers = v1_volume_snapshots_getall_with_http_info(volume_snapshot_uuid, opts)
      data
    end

    # Get the detail of a volume snapshot
    # View the usage of a snapshot. The snapshot may take time sync because the data is cached.
    # @param volume_snapshot_uuid [String] The volume snapshot UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SnapshotV1, Integer, Hash)>] SnapshotV1 data, response status code and response headers
    def v1_volume_snapshots_getall_with_http_info(volume_snapshot_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnapshotsApi.v1_volume_snapshots_getall ...'
      end
      # verify the required parameter 'volume_snapshot_uuid' is set
      if @api_client.config.client_side_validation && volume_snapshot_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'volume_snapshot_uuid' when calling SnapshotsApi.v1_volume_snapshots_getall"
      end
      # resource path
      local_var_path = '/v1/volume-snapshots/{volume_snapshot_uuid}'.sub('{' + 'volume_snapshot_uuid' + '}', CGI.escape(volume_snapshot_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SnapshotV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"SnapshotsApi.v1_volume_snapshots_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotsApi#v1_volume_snapshots_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
