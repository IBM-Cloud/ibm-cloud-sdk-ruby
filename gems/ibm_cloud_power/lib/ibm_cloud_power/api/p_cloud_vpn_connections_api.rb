=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module IbmCloudPower
  class PCloudVPNConnectionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete VPN Connection
    # Delete VPN Connection (by its identifier)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param [Hash] opts the optional parameters
    # @return [JobReference]
    def pcloud_vpnconnections_delete(cloud_instance_id, vpn_connection_id, opts = {})
      data, _status_code, _headers = pcloud_vpnconnections_delete_with_http_info(cloud_instance_id, vpn_connection_id, opts)
      data
    end

    # Delete VPN Connection
    # Delete VPN Connection (by its identifier)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobReference, Integer, Hash)>] JobReference data, response status code and response headers
    def pcloud_vpnconnections_delete_with_http_info(cloud_instance_id, vpn_connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNConnectionsApi.pcloud_vpnconnections_delete ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_delete"
      end
      # verify the required parameter 'vpn_connection_id' is set
      if @api_client.config.client_side_validation && vpn_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_connection_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_delete"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/vpn-connections/{vpn_connection_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'vpn_connection_id' + '}', CGI.escape(vpn_connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JobReference'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNConnectionsApi.pcloud_vpnconnections_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNConnectionsApi#pcloud_vpnconnections_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get VPN Connection
    # Get a VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param [Hash] opts the optional parameters
    # @return [VPNConnection]
    def pcloud_vpnconnections_get(cloud_instance_id, vpn_connection_id, opts = {})
      data, _status_code, _headers = pcloud_vpnconnections_get_with_http_info(cloud_instance_id, vpn_connection_id, opts)
      data
    end

    # Get VPN Connection
    # Get a VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPNConnection, Integer, Hash)>] VPNConnection data, response status code and response headers
    def pcloud_vpnconnections_get_with_http_info(cloud_instance_id, vpn_connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNConnectionsApi.pcloud_vpnconnections_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_get"
      end
      # verify the required parameter 'vpn_connection_id' is set
      if @api_client.config.client_side_validation && vpn_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_connection_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/vpn-connections/{vpn_connection_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'vpn_connection_id' + '}', CGI.escape(vpn_connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VPNConnection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNConnectionsApi.pcloud_vpnconnections_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNConnectionsApi#pcloud_vpnconnections_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all VPN Connections
    # Get all VPN Connections
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [VPNConnections]
    def pcloud_vpnconnections_getall(cloud_instance_id, opts = {})
      data, _status_code, _headers = pcloud_vpnconnections_getall_with_http_info(cloud_instance_id, opts)
      data
    end

    # Get all VPN Connections
    # Get all VPN Connections
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPNConnections, Integer, Hash)>] VPNConnections data, response status code and response headers
    def pcloud_vpnconnections_getall_with_http_info(cloud_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNConnectionsApi.pcloud_vpnconnections_getall ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_getall"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/vpn-connections'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VPNConnections'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNConnectionsApi.pcloud_vpnconnections_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNConnectionsApi#pcloud_vpnconnections_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detach network
    # Detach network from a specific VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param body [NetworkID] network to detach
    # @param [Hash] opts the optional parameters
    # @return [JobReference]
    def pcloud_vpnconnections_networks_delete(cloud_instance_id, vpn_connection_id, body, opts = {})
      data, _status_code, _headers = pcloud_vpnconnections_networks_delete_with_http_info(cloud_instance_id, vpn_connection_id, body, opts)
      data
    end

    # Detach network
    # Detach network from a specific VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param body [NetworkID] network to detach
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobReference, Integer, Hash)>] JobReference data, response status code and response headers
    def pcloud_vpnconnections_networks_delete_with_http_info(cloud_instance_id, vpn_connection_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNConnectionsApi.pcloud_vpnconnections_networks_delete ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_networks_delete"
      end
      # verify the required parameter 'vpn_connection_id' is set
      if @api_client.config.client_side_validation && vpn_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_connection_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_networks_delete"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_networks_delete"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/vpn-connections/{vpn_connection_id}/networks'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'vpn_connection_id' + '}', CGI.escape(vpn_connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'JobReference'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNConnectionsApi.pcloud_vpnconnections_networks_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNConnectionsApi#pcloud_vpnconnections_networks_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get attached networks
    # Get a list of network IDs attached to a VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param [Hash] opts the optional parameters
    # @return [NetworkIDs]
    def pcloud_vpnconnections_networks_get(cloud_instance_id, vpn_connection_id, opts = {})
      data, _status_code, _headers = pcloud_vpnconnections_networks_get_with_http_info(cloud_instance_id, vpn_connection_id, opts)
      data
    end

    # Get attached networks
    # Get a list of network IDs attached to a VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkIDs, Integer, Hash)>] NetworkIDs data, response status code and response headers
    def pcloud_vpnconnections_networks_get_with_http_info(cloud_instance_id, vpn_connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNConnectionsApi.pcloud_vpnconnections_networks_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_networks_get"
      end
      # verify the required parameter 'vpn_connection_id' is set
      if @api_client.config.client_side_validation && vpn_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_connection_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_networks_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/vpn-connections/{vpn_connection_id}/networks'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'vpn_connection_id' + '}', CGI.escape(vpn_connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkIDs'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNConnectionsApi.pcloud_vpnconnections_networks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNConnectionsApi#pcloud_vpnconnections_networks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Attach network
    # Attach a network to a VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param body [NetworkID] network to attach
    # @param [Hash] opts the optional parameters
    # @return [JobReference]
    def pcloud_vpnconnections_networks_put(cloud_instance_id, vpn_connection_id, body, opts = {})
      data, _status_code, _headers = pcloud_vpnconnections_networks_put_with_http_info(cloud_instance_id, vpn_connection_id, body, opts)
      data
    end

    # Attach network
    # Attach a network to a VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param body [NetworkID] network to attach
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobReference, Integer, Hash)>] JobReference data, response status code and response headers
    def pcloud_vpnconnections_networks_put_with_http_info(cloud_instance_id, vpn_connection_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNConnectionsApi.pcloud_vpnconnections_networks_put ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_networks_put"
      end
      # verify the required parameter 'vpn_connection_id' is set
      if @api_client.config.client_side_validation && vpn_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_connection_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_networks_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_networks_put"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/vpn-connections/{vpn_connection_id}/networks'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'vpn_connection_id' + '}', CGI.escape(vpn_connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'JobReference'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNConnectionsApi.pcloud_vpnconnections_networks_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNConnectionsApi#pcloud_vpnconnections_networks_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detach Peer Subnet
    # Detach peer subnet from a VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param body [PeerSubnetUpdate] Peer subnet to detach
    # @param [Hash] opts the optional parameters
    # @return [PeerSubnets]
    def pcloud_vpnconnections_peersubnets_delete(cloud_instance_id, vpn_connection_id, body, opts = {})
      data, _status_code, _headers = pcloud_vpnconnections_peersubnets_delete_with_http_info(cloud_instance_id, vpn_connection_id, body, opts)
      data
    end

    # Detach Peer Subnet
    # Detach peer subnet from a VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param body [PeerSubnetUpdate] Peer subnet to detach
    # @param [Hash] opts the optional parameters
    # @return [Array<(PeerSubnets, Integer, Hash)>] PeerSubnets data, response status code and response headers
    def pcloud_vpnconnections_peersubnets_delete_with_http_info(cloud_instance_id, vpn_connection_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNConnectionsApi.pcloud_vpnconnections_peersubnets_delete ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_peersubnets_delete"
      end
      # verify the required parameter 'vpn_connection_id' is set
      if @api_client.config.client_side_validation && vpn_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_connection_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_peersubnets_delete"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_peersubnets_delete"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/vpn-connections/{vpn_connection_id}/peer-subnets'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'vpn_connection_id' + '}', CGI.escape(vpn_connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'PeerSubnets'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNConnectionsApi.pcloud_vpnconnections_peersubnets_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNConnectionsApi#pcloud_vpnconnections_peersubnets_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Peer Subnets
    # Get a list of peer subnets attached to a specific VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param [Hash] opts the optional parameters
    # @return [PeerSubnets]
    def pcloud_vpnconnections_peersubnets_get(cloud_instance_id, vpn_connection_id, opts = {})
      data, _status_code, _headers = pcloud_vpnconnections_peersubnets_get_with_http_info(cloud_instance_id, vpn_connection_id, opts)
      data
    end

    # Get Peer Subnets
    # Get a list of peer subnets attached to a specific VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param [Hash] opts the optional parameters
    # @return [Array<(PeerSubnets, Integer, Hash)>] PeerSubnets data, response status code and response headers
    def pcloud_vpnconnections_peersubnets_get_with_http_info(cloud_instance_id, vpn_connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNConnectionsApi.pcloud_vpnconnections_peersubnets_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_peersubnets_get"
      end
      # verify the required parameter 'vpn_connection_id' is set
      if @api_client.config.client_side_validation && vpn_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_connection_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_peersubnets_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/vpn-connections/{vpn_connection_id}/peer-subnets'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'vpn_connection_id' + '}', CGI.escape(vpn_connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PeerSubnets'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNConnectionsApi.pcloud_vpnconnections_peersubnets_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNConnectionsApi#pcloud_vpnconnections_peersubnets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Attach Peer Subnet
    # Attach peer subnet to a VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param body [PeerSubnetUpdate] peer subnet to attach
    # @param [Hash] opts the optional parameters
    # @return [PeerSubnets]
    def pcloud_vpnconnections_peersubnets_put(cloud_instance_id, vpn_connection_id, body, opts = {})
      data, _status_code, _headers = pcloud_vpnconnections_peersubnets_put_with_http_info(cloud_instance_id, vpn_connection_id, body, opts)
      data
    end

    # Attach Peer Subnet
    # Attach peer subnet to a VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param body [PeerSubnetUpdate] peer subnet to attach
    # @param [Hash] opts the optional parameters
    # @return [Array<(PeerSubnets, Integer, Hash)>] PeerSubnets data, response status code and response headers
    def pcloud_vpnconnections_peersubnets_put_with_http_info(cloud_instance_id, vpn_connection_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNConnectionsApi.pcloud_vpnconnections_peersubnets_put ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_peersubnets_put"
      end
      # verify the required parameter 'vpn_connection_id' is set
      if @api_client.config.client_side_validation && vpn_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_connection_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_peersubnets_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_peersubnets_put"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/vpn-connections/{vpn_connection_id}/peer-subnets'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'vpn_connection_id' + '}', CGI.escape(vpn_connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'PeerSubnets'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNConnectionsApi.pcloud_vpnconnections_peersubnets_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNConnectionsApi#pcloud_vpnconnections_peersubnets_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create VPN Connection
    # Create a new VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [VPNConnectionCreate] VPN Connection object used for creation
    # @param [Hash] opts the optional parameters
    # @return [VPNConnectionCreateResponse]
    def pcloud_vpnconnections_post(cloud_instance_id, body, opts = {})
      data, _status_code, _headers = pcloud_vpnconnections_post_with_http_info(cloud_instance_id, body, opts)
      data
    end

    # Create VPN Connection
    # Create a new VPN Connection
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [VPNConnectionCreate] VPN Connection object used for creation
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPNConnectionCreateResponse, Integer, Hash)>] VPNConnectionCreateResponse data, response status code and response headers
    def pcloud_vpnconnections_post_with_http_info(cloud_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNConnectionsApi.pcloud_vpnconnections_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_post"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/vpn-connections'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'VPNConnectionCreateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNConnectionsApi.pcloud_vpnconnections_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNConnectionsApi#pcloud_vpnconnections_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update VPN Connection
    # update a VPN Connection (by its identifier)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param body [VPNConnectionUpdate] VPN Connection object used for update
    # @param [Hash] opts the optional parameters
    # @return [VPNConnection]
    def pcloud_vpnconnections_put(cloud_instance_id, vpn_connection_id, body, opts = {})
      data, _status_code, _headers = pcloud_vpnconnections_put_with_http_info(cloud_instance_id, vpn_connection_id, body, opts)
      data
    end

    # Update VPN Connection
    # update a VPN Connection (by its identifier)
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param vpn_connection_id [String] ID of a VPN connection
    # @param body [VPNConnectionUpdate] VPN Connection object used for update
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPNConnection, Integer, Hash)>] VPNConnection data, response status code and response headers
    def pcloud_vpnconnections_put_with_http_info(cloud_instance_id, vpn_connection_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudVPNConnectionsApi.pcloud_vpnconnections_put ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_put"
      end
      # verify the required parameter 'vpn_connection_id' is set
      if @api_client.config.client_side_validation && vpn_connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'vpn_connection_id' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudVPNConnectionsApi.pcloud_vpnconnections_put"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/vpn/vpn-connections/{vpn_connection_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'vpn_connection_id' + '}', CGI.escape(vpn_connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'VPNConnection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudVPNConnectionsApi.pcloud_vpnconnections_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudVPNConnectionsApi#pcloud_vpnconnections_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
