=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module IbmCloudPower
  class NetworkSecurityGroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Perform a Network Security Groups action (enable, disable) on a workspace. On enablement, a default Network Security Group is created to allow all traffic for all active network iterfaces
    # @param body [NetworkSecurityGroupsAction] Parameters for the desired action
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_network_security_groups_action_post(body, opts = {})
      data, _status_code, _headers = v1_network_security_groups_action_post_with_http_info(body, opts)
      data
    end

    # Perform a Network Security Groups action (enable, disable) on a workspace. On enablement, a default Network Security Group is created to allow all traffic for all active network iterfaces
    # @param body [NetworkSecurityGroupsAction] Parameters for the desired action
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_network_security_groups_action_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityGroupsApi.v1_network_security_groups_action_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NetworkSecurityGroupsApi.v1_network_security_groups_action_post"
      end
      # resource path
      local_var_path = '/v1/network-security-groups/action'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkSecurityGroupsApi.v1_network_security_groups_action_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityGroupsApi#v1_network_security_groups_action_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Network Security Group from a workspace
    # @param network_security_group_id [String] Network Security Group ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_network_security_groups_id_delete(network_security_group_id, opts = {})
      data, _status_code, _headers = v1_network_security_groups_id_delete_with_http_info(network_security_group_id, opts)
      data
    end

    # Delete a Network Security Group from a workspace
    # @param network_security_group_id [String] Network Security Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_network_security_groups_id_delete_with_http_info(network_security_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityGroupsApi.v1_network_security_groups_id_delete ...'
      end
      # verify the required parameter 'network_security_group_id' is set
      if @api_client.config.client_side_validation && network_security_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_security_group_id' when calling NetworkSecurityGroupsApi.v1_network_security_groups_id_delete"
      end
      # resource path
      local_var_path = '/v1/network-security-groups/{network_security_group_id}'.sub('{' + 'network_security_group_id' + '}', CGI.escape(network_security_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkSecurityGroupsApi.v1_network_security_groups_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityGroupsApi#v1_network_security_groups_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the detail of a Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param [Hash] opts the optional parameters
    # @return [NetworkSecurityGroup]
    def v1_network_security_groups_id_get(network_security_group_id, opts = {})
      data, _status_code, _headers = v1_network_security_groups_id_get_with_http_info(network_security_group_id, opts)
      data
    end

    # Get the detail of a Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkSecurityGroup, Integer, Hash)>] NetworkSecurityGroup data, response status code and response headers
    def v1_network_security_groups_id_get_with_http_info(network_security_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityGroupsApi.v1_network_security_groups_id_get ...'
      end
      # verify the required parameter 'network_security_group_id' is set
      if @api_client.config.client_side_validation && network_security_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_security_group_id' when calling NetworkSecurityGroupsApi.v1_network_security_groups_id_get"
      end
      # resource path
      local_var_path = '/v1/network-security-groups/{network_security_group_id}'.sub('{' + 'network_security_group_id' + '}', CGI.escape(network_security_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkSecurityGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkSecurityGroupsApi.v1_network_security_groups_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityGroupsApi#v1_network_security_groups_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clone a Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param body [NetworkSecurityGroupClone] Parameters for the clone of a Network Security Group
    # @param [Hash] opts the optional parameters
    # @return [NetworkSecurityGroup]
    def v1_network_security_groups_id_post(network_security_group_id, body, opts = {})
      data, _status_code, _headers = v1_network_security_groups_id_post_with_http_info(network_security_group_id, body, opts)
      data
    end

    # Clone a Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param body [NetworkSecurityGroupClone] Parameters for the clone of a Network Security Group
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkSecurityGroup, Integer, Hash)>] NetworkSecurityGroup data, response status code and response headers
    def v1_network_security_groups_id_post_with_http_info(network_security_group_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityGroupsApi.v1_network_security_groups_id_post ...'
      end
      # verify the required parameter 'network_security_group_id' is set
      if @api_client.config.client_side_validation && network_security_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_security_group_id' when calling NetworkSecurityGroupsApi.v1_network_security_groups_id_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NetworkSecurityGroupsApi.v1_network_security_groups_id_post"
      end
      # resource path
      local_var_path = '/v1/network-security-groups/{network_security_group_id}'.sub('{' + 'network_security_group_id' + '}', CGI.escape(network_security_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkSecurityGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkSecurityGroupsApi.v1_network_security_groups_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityGroupsApi#v1_network_security_groups_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param body [NetworkSecurityGroupUpdate] Parameters for the update of a Network Security Group
    # @param [Hash] opts the optional parameters
    # @return [NetworkSecurityGroup]
    def v1_network_security_groups_id_put(network_security_group_id, body, opts = {})
      data, _status_code, _headers = v1_network_security_groups_id_put_with_http_info(network_security_group_id, body, opts)
      data
    end

    # Update a Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param body [NetworkSecurityGroupUpdate] Parameters for the update of a Network Security Group
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkSecurityGroup, Integer, Hash)>] NetworkSecurityGroup data, response status code and response headers
    def v1_network_security_groups_id_put_with_http_info(network_security_group_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityGroupsApi.v1_network_security_groups_id_put ...'
      end
      # verify the required parameter 'network_security_group_id' is set
      if @api_client.config.client_side_validation && network_security_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_security_group_id' when calling NetworkSecurityGroupsApi.v1_network_security_groups_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NetworkSecurityGroupsApi.v1_network_security_groups_id_put"
      end
      # resource path
      local_var_path = '/v1/network-security-groups/{network_security_group_id}'.sub('{' + 'network_security_group_id' + '}', CGI.escape(network_security_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkSecurityGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkSecurityGroupsApi.v1_network_security_groups_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityGroupsApi#v1_network_security_groups_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of Network Security Groups for a workspace
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_nsg 
    # @return [NetworkSecurityGroups]
    def v1_network_security_groups_list(opts = {})
      data, _status_code, _headers = v1_network_security_groups_list_with_http_info(opts)
      data
    end

    # Get the list of Network Security Groups for a workspace
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_nsg 
    # @return [Array<(NetworkSecurityGroups, Integer, Hash)>] NetworkSecurityGroups data, response status code and response headers
    def v1_network_security_groups_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityGroupsApi.v1_network_security_groups_list ...'
      end
      # resource path
      local_var_path = '/v1/network-security-groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'default_nsg'] = opts[:'default_nsg'] if !opts[:'default_nsg'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkSecurityGroups'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkSecurityGroupsApi.v1_network_security_groups_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityGroupsApi#v1_network_security_groups_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the member from a Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param network_security_group_member_id [String] Network Security Group Member ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_network_security_groups_members_delete(network_security_group_id, network_security_group_member_id, opts = {})
      data, _status_code, _headers = v1_network_security_groups_members_delete_with_http_info(network_security_group_id, network_security_group_member_id, opts)
      data
    end

    # Delete the member from a Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param network_security_group_member_id [String] Network Security Group Member ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_network_security_groups_members_delete_with_http_info(network_security_group_id, network_security_group_member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityGroupsApi.v1_network_security_groups_members_delete ...'
      end
      # verify the required parameter 'network_security_group_id' is set
      if @api_client.config.client_side_validation && network_security_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_security_group_id' when calling NetworkSecurityGroupsApi.v1_network_security_groups_members_delete"
      end
      # verify the required parameter 'network_security_group_member_id' is set
      if @api_client.config.client_side_validation && network_security_group_member_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_security_group_member_id' when calling NetworkSecurityGroupsApi.v1_network_security_groups_members_delete"
      end
      # resource path
      local_var_path = '/v1/network-security-groups/{network_security_group_id}/members/{network_security_group_member_id}'.sub('{' + 'network_security_group_id' + '}', CGI.escape(network_security_group_id.to_s)).sub('{' + 'network_security_group_member_id' + '}', CGI.escape(network_security_group_member_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkSecurityGroupsApi.v1_network_security_groups_members_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityGroupsApi#v1_network_security_groups_members_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a member to a Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param body [NetworkSecurityGroupAddMember] Parameters for adding a member to a Network Security Group
    # @param [Hash] opts the optional parameters
    # @return [NetworkSecurityGroupMember]
    def v1_network_security_groups_members_post(network_security_group_id, body, opts = {})
      data, _status_code, _headers = v1_network_security_groups_members_post_with_http_info(network_security_group_id, body, opts)
      data
    end

    # Add a member to a Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param body [NetworkSecurityGroupAddMember] Parameters for adding a member to a Network Security Group
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkSecurityGroupMember, Integer, Hash)>] NetworkSecurityGroupMember data, response status code and response headers
    def v1_network_security_groups_members_post_with_http_info(network_security_group_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityGroupsApi.v1_network_security_groups_members_post ...'
      end
      # verify the required parameter 'network_security_group_id' is set
      if @api_client.config.client_side_validation && network_security_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_security_group_id' when calling NetworkSecurityGroupsApi.v1_network_security_groups_members_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NetworkSecurityGroupsApi.v1_network_security_groups_members_post"
      end
      # resource path
      local_var_path = '/v1/network-security-groups/{network_security_group_id}/members'.sub('{' + 'network_security_group_id' + '}', CGI.escape(network_security_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkSecurityGroupMember'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkSecurityGroupsApi.v1_network_security_groups_members_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityGroupsApi#v1_network_security_groups_members_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move a Network Security Group member to another Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param body [NetworkSecurityGroupMoveMember] Parameters for moving a Network Security Group member to another Network Security Group
    # @param [Hash] opts the optional parameters
    # @return [NetworkSecurityGroupMember]
    def v1_network_security_groups_move_member_post(network_security_group_id, body, opts = {})
      data, _status_code, _headers = v1_network_security_groups_move_member_post_with_http_info(network_security_group_id, body, opts)
      data
    end

    # Move a Network Security Group member to another Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param body [NetworkSecurityGroupMoveMember] Parameters for moving a Network Security Group member to another Network Security Group
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkSecurityGroupMember, Integer, Hash)>] NetworkSecurityGroupMember data, response status code and response headers
    def v1_network_security_groups_move_member_post_with_http_info(network_security_group_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityGroupsApi.v1_network_security_groups_move_member_post ...'
      end
      # verify the required parameter 'network_security_group_id' is set
      if @api_client.config.client_side_validation && network_security_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_security_group_id' when calling NetworkSecurityGroupsApi.v1_network_security_groups_move_member_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NetworkSecurityGroupsApi.v1_network_security_groups_move_member_post"
      end
      # resource path
      local_var_path = '/v1/network-security-groups/{network_security_group_id}/move_member'.sub('{' + 'network_security_group_id' + '}', CGI.escape(network_security_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkSecurityGroupMember'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkSecurityGroupsApi.v1_network_security_groups_move_member_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityGroupsApi#v1_network_security_groups_move_member_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Network Security Group
    # @param body [NetworkSecurityGroupCreate] Parameters for the creation of a Network Security Group
    # @param [Hash] opts the optional parameters
    # @return [NetworkSecurityGroup]
    def v1_network_security_groups_post(body, opts = {})
      data, _status_code, _headers = v1_network_security_groups_post_with_http_info(body, opts)
      data
    end

    # Create a new Network Security Group
    # @param body [NetworkSecurityGroupCreate] Parameters for the creation of a Network Security Group
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkSecurityGroup, Integer, Hash)>] NetworkSecurityGroup data, response status code and response headers
    def v1_network_security_groups_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityGroupsApi.v1_network_security_groups_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NetworkSecurityGroupsApi.v1_network_security_groups_post"
      end
      # resource path
      local_var_path = '/v1/network-security-groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkSecurityGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkSecurityGroupsApi.v1_network_security_groups_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityGroupsApi#v1_network_security_groups_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the rule from a Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param network_security_group_rule_id [String] Network Security Group Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_network_security_groups_rules_delete(network_security_group_id, network_security_group_rule_id, opts = {})
      data, _status_code, _headers = v1_network_security_groups_rules_delete_with_http_info(network_security_group_id, network_security_group_rule_id, opts)
      data
    end

    # Delete the rule from a Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param network_security_group_rule_id [String] Network Security Group Rule ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_network_security_groups_rules_delete_with_http_info(network_security_group_id, network_security_group_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityGroupsApi.v1_network_security_groups_rules_delete ...'
      end
      # verify the required parameter 'network_security_group_id' is set
      if @api_client.config.client_side_validation && network_security_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_security_group_id' when calling NetworkSecurityGroupsApi.v1_network_security_groups_rules_delete"
      end
      # verify the required parameter 'network_security_group_rule_id' is set
      if @api_client.config.client_side_validation && network_security_group_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_security_group_rule_id' when calling NetworkSecurityGroupsApi.v1_network_security_groups_rules_delete"
      end
      # resource path
      local_var_path = '/v1/network-security-groups/{network_security_group_id}/rules/{network_security_group_rule_id}'.sub('{' + 'network_security_group_id' + '}', CGI.escape(network_security_group_id.to_s)).sub('{' + 'network_security_group_rule_id' + '}', CGI.escape(network_security_group_rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkSecurityGroupsApi.v1_network_security_groups_rules_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityGroupsApi#v1_network_security_groups_rules_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a rule to a Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param body [NetworkSecurityGroupAddRule] Parameters for adding a rule to a Network Security Group
    # @param [Hash] opts the optional parameters
    # @return [NetworkSecurityGroupRule]
    def v1_network_security_groups_rules_post(network_security_group_id, body, opts = {})
      data, _status_code, _headers = v1_network_security_groups_rules_post_with_http_info(network_security_group_id, body, opts)
      data
    end

    # Add a rule to a Network Security Group
    # @param network_security_group_id [String] Network Security Group ID
    # @param body [NetworkSecurityGroupAddRule] Parameters for adding a rule to a Network Security Group
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkSecurityGroupRule, Integer, Hash)>] NetworkSecurityGroupRule data, response status code and response headers
    def v1_network_security_groups_rules_post_with_http_info(network_security_group_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityGroupsApi.v1_network_security_groups_rules_post ...'
      end
      # verify the required parameter 'network_security_group_id' is set
      if @api_client.config.client_side_validation && network_security_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_security_group_id' when calling NetworkSecurityGroupsApi.v1_network_security_groups_rules_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NetworkSecurityGroupsApi.v1_network_security_groups_rules_post"
      end
      # resource path
      local_var_path = '/v1/network-security-groups/{network_security_group_id}/rules'.sub('{' + 'network_security_group_id' + '}', CGI.escape(network_security_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkSecurityGroupRule'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworkSecurityGroupsApi.v1_network_security_groups_rules_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityGroupsApi#v1_network_security_groups_rules_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
