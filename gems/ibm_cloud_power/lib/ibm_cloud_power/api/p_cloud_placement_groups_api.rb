=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module IbmCloudPower
  class PCloudPlacementGroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Server Placement Group
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param placement_group_id [String] Placement Group ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def pcloud_placementgroups_delete(cloud_instance_id, placement_group_id, opts = {})
      data, _status_code, _headers = pcloud_placementgroups_delete_with_http_info(cloud_instance_id, placement_group_id, opts)
      data
    end

    # Delete Server Placement Group
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param placement_group_id [String] Placement Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def pcloud_placementgroups_delete_with_http_info(cloud_instance_id, placement_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudPlacementGroupsApi.pcloud_placementgroups_delete ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudPlacementGroupsApi.pcloud_placementgroups_delete"
      end
      # verify the required parameter 'placement_group_id' is set
      if @api_client.config.client_side_validation && placement_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'placement_group_id' when calling PCloudPlacementGroupsApi.pcloud_placementgroups_delete"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/placement-groups/{placement_group_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'placement_group_id' + '}', CGI.escape(placement_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudPlacementGroupsApi.pcloud_placementgroups_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudPlacementGroupsApi#pcloud_placementgroups_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Server Placement Group detail
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param placement_group_id [String] Placement Group ID
    # @param [Hash] opts the optional parameters
    # @return [PlacementGroup]
    def pcloud_placementgroups_get(cloud_instance_id, placement_group_id, opts = {})
      data, _status_code, _headers = pcloud_placementgroups_get_with_http_info(cloud_instance_id, placement_group_id, opts)
      data
    end

    # Get Server Placement Group detail
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param placement_group_id [String] Placement Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlacementGroup, Integer, Hash)>] PlacementGroup data, response status code and response headers
    def pcloud_placementgroups_get_with_http_info(cloud_instance_id, placement_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudPlacementGroupsApi.pcloud_placementgroups_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudPlacementGroupsApi.pcloud_placementgroups_get"
      end
      # verify the required parameter 'placement_group_id' is set
      if @api_client.config.client_side_validation && placement_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'placement_group_id' when calling PCloudPlacementGroupsApi.pcloud_placementgroups_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/placement-groups/{placement_group_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'placement_group_id' + '}', CGI.escape(placement_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlacementGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudPlacementGroupsApi.pcloud_placementgroups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudPlacementGroupsApi#pcloud_placementgroups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Server Placement Groups
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [PlacementGroups]
    def pcloud_placementgroups_getall(cloud_instance_id, opts = {})
      data, _status_code, _headers = pcloud_placementgroups_getall_with_http_info(cloud_instance_id, opts)
      data
    end

    # Get all Server Placement Groups
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlacementGroups, Integer, Hash)>] PlacementGroups data, response status code and response headers
    def pcloud_placementgroups_getall_with_http_info(cloud_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudPlacementGroupsApi.pcloud_placementgroups_getall ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudPlacementGroupsApi.pcloud_placementgroups_getall"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/placement-groups'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlacementGroups'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudPlacementGroupsApi.pcloud_placementgroups_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudPlacementGroupsApi#pcloud_placementgroups_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Server from Placement Group
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param placement_group_id [String] Placement Group ID
    # @param body [PlacementGroupServer] Parameters for removing a Server in a Placement Group
    # @param [Hash] opts the optional parameters
    # @return [PlacementGroup]
    def pcloud_placementgroups_members_delete(cloud_instance_id, placement_group_id, body, opts = {})
      data, _status_code, _headers = pcloud_placementgroups_members_delete_with_http_info(cloud_instance_id, placement_group_id, body, opts)
      data
    end

    # Remove Server from Placement Group
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param placement_group_id [String] Placement Group ID
    # @param body [PlacementGroupServer] Parameters for removing a Server in a Placement Group
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlacementGroup, Integer, Hash)>] PlacementGroup data, response status code and response headers
    def pcloud_placementgroups_members_delete_with_http_info(cloud_instance_id, placement_group_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudPlacementGroupsApi.pcloud_placementgroups_members_delete ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudPlacementGroupsApi.pcloud_placementgroups_members_delete"
      end
      # verify the required parameter 'placement_group_id' is set
      if @api_client.config.client_side_validation && placement_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'placement_group_id' when calling PCloudPlacementGroupsApi.pcloud_placementgroups_members_delete"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudPlacementGroupsApi.pcloud_placementgroups_members_delete"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/placement-groups/{placement_group_id}/members'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'placement_group_id' + '}', CGI.escape(placement_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'PlacementGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudPlacementGroupsApi.pcloud_placementgroups_members_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudPlacementGroupsApi#pcloud_placementgroups_members_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Server to Placement Group
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param placement_group_id [String] Placement Group ID
    # @param body [PlacementGroupServer] Parameters for adding a server to a Server Placement Group
    # @param [Hash] opts the optional parameters
    # @return [PlacementGroup]
    def pcloud_placementgroups_members_post(cloud_instance_id, placement_group_id, body, opts = {})
      data, _status_code, _headers = pcloud_placementgroups_members_post_with_http_info(cloud_instance_id, placement_group_id, body, opts)
      data
    end

    # Add Server to Placement Group
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param placement_group_id [String] Placement Group ID
    # @param body [PlacementGroupServer] Parameters for adding a server to a Server Placement Group
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlacementGroup, Integer, Hash)>] PlacementGroup data, response status code and response headers
    def pcloud_placementgroups_members_post_with_http_info(cloud_instance_id, placement_group_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudPlacementGroupsApi.pcloud_placementgroups_members_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudPlacementGroupsApi.pcloud_placementgroups_members_post"
      end
      # verify the required parameter 'placement_group_id' is set
      if @api_client.config.client_side_validation && placement_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'placement_group_id' when calling PCloudPlacementGroupsApi.pcloud_placementgroups_members_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudPlacementGroupsApi.pcloud_placementgroups_members_post"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/placement-groups/{placement_group_id}/members'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'placement_group_id' + '}', CGI.escape(placement_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'PlacementGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudPlacementGroupsApi.pcloud_placementgroups_members_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudPlacementGroupsApi#pcloud_placementgroups_members_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Server Placement Group
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [PlacementGroupCreate] Parameters for the creation of a new Server Placement Group
    # @param [Hash] opts the optional parameters
    # @return [PlacementGroup]
    def pcloud_placementgroups_post(cloud_instance_id, body, opts = {})
      data, _status_code, _headers = pcloud_placementgroups_post_with_http_info(cloud_instance_id, body, opts)
      data
    end

    # Create a new Server Placement Group
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [PlacementGroupCreate] Parameters for the creation of a new Server Placement Group
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlacementGroup, Integer, Hash)>] PlacementGroup data, response status code and response headers
    def pcloud_placementgroups_post_with_http_info(cloud_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudPlacementGroupsApi.pcloud_placementgroups_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudPlacementGroupsApi.pcloud_placementgroups_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudPlacementGroupsApi.pcloud_placementgroups_post"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/placement-groups'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'PlacementGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudPlacementGroupsApi.pcloud_placementgroups_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudPlacementGroupsApi#pcloud_placementgroups_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
