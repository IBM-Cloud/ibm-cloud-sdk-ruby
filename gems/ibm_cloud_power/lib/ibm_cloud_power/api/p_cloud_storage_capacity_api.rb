=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module IbmCloudPower
  class PCloudStorageCapacityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Storage capacity for a storage pool in a region
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param storage_pool_name [String] Storage pool name
    # @param [Hash] opts the optional parameters
    # @return [StoragePoolCapacity]
    def pcloud_storagecapacity_pools_get(cloud_instance_id, storage_pool_name, opts = {})
      data, _status_code, _headers = pcloud_storagecapacity_pools_get_with_http_info(cloud_instance_id, storage_pool_name, opts)
      data
    end

    # Storage capacity for a storage pool in a region
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param storage_pool_name [String] Storage pool name
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoragePoolCapacity, Integer, Hash)>] StoragePoolCapacity data, response status code and response headers
    def pcloud_storagecapacity_pools_get_with_http_info(cloud_instance_id, storage_pool_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudStorageCapacityApi.pcloud_storagecapacity_pools_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudStorageCapacityApi.pcloud_storagecapacity_pools_get"
      end
      # verify the required parameter 'storage_pool_name' is set
      if @api_client.config.client_side_validation && storage_pool_name.nil?
        fail ArgumentError, "Missing the required parameter 'storage_pool_name' when calling PCloudStorageCapacityApi.pcloud_storagecapacity_pools_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/storage-capacity/storage-pools/{storage_pool_name}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'storage_pool_name' + '}', CGI.escape(storage_pool_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StoragePoolCapacity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudStorageCapacityApi.pcloud_storagecapacity_pools_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudStorageCapacityApi#pcloud_storagecapacity_pools_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Storage capacity for all available storage pools in a region
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [StoragePoolsCapacity]
    def pcloud_storagecapacity_pools_getall(cloud_instance_id, opts = {})
      data, _status_code, _headers = pcloud_storagecapacity_pools_getall_with_http_info(cloud_instance_id, opts)
      data
    end

    # Storage capacity for all available storage pools in a region
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoragePoolsCapacity, Integer, Hash)>] StoragePoolsCapacity data, response status code and response headers
    def pcloud_storagecapacity_pools_getall_with_http_info(cloud_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudStorageCapacityApi.pcloud_storagecapacity_pools_getall ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudStorageCapacityApi.pcloud_storagecapacity_pools_getall"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/storage-capacity/storage-pools'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StoragePoolsCapacity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudStorageCapacityApi.pcloud_storagecapacity_pools_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudStorageCapacityApi#pcloud_storagecapacity_pools_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Storage capacity for a storage type in a region
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param storage_type_name [String] Storage type name
    # @param [Hash] opts the optional parameters
    # @return [StorageTypeCapacity]
    def pcloud_storagecapacity_types_get(cloud_instance_id, storage_type_name, opts = {})
      data, _status_code, _headers = pcloud_storagecapacity_types_get_with_http_info(cloud_instance_id, storage_type_name, opts)
      data
    end

    # Storage capacity for a storage type in a region
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param storage_type_name [String] Storage type name
    # @param [Hash] opts the optional parameters
    # @return [Array<(StorageTypeCapacity, Integer, Hash)>] StorageTypeCapacity data, response status code and response headers
    def pcloud_storagecapacity_types_get_with_http_info(cloud_instance_id, storage_type_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudStorageCapacityApi.pcloud_storagecapacity_types_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudStorageCapacityApi.pcloud_storagecapacity_types_get"
      end
      # verify the required parameter 'storage_type_name' is set
      if @api_client.config.client_side_validation && storage_type_name.nil?
        fail ArgumentError, "Missing the required parameter 'storage_type_name' when calling PCloudStorageCapacityApi.pcloud_storagecapacity_types_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/storage-capacity/storage-types/{storage_type_name}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'storage_type_name' + '}', CGI.escape(storage_type_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StorageTypeCapacity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudStorageCapacityApi.pcloud_storagecapacity_types_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudStorageCapacityApi#pcloud_storagecapacity_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Storage capacity for all available storage types in a region
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [StorageTypesCapacity]
    def pcloud_storagecapacity_types_getall(cloud_instance_id, opts = {})
      data, _status_code, _headers = pcloud_storagecapacity_types_getall_with_http_info(cloud_instance_id, opts)
      data
    end

    # Storage capacity for all available storage types in a region
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(StorageTypesCapacity, Integer, Hash)>] StorageTypesCapacity data, response status code and response headers
    def pcloud_storagecapacity_types_getall_with_http_info(cloud_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudStorageCapacityApi.pcloud_storagecapacity_types_getall ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudStorageCapacityApi.pcloud_storagecapacity_types_getall"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/storage-capacity/storage-types'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StorageTypesCapacity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudStorageCapacityApi.pcloud_storagecapacity_types_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudStorageCapacityApi#pcloud_storagecapacity_types_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
