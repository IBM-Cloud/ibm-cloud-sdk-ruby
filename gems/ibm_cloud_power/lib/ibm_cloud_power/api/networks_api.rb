=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module IbmCloudPower
  class NetworksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a Network Interface
    # @param network_id [String] Network ID
    # @param network_interface_id [String] Network Interface ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_networks_network_interfaces_delete(network_id, network_interface_id, opts = {})
      data, _status_code, _headers = v1_networks_network_interfaces_delete_with_http_info(network_id, network_interface_id, opts)
      data
    end

    # Delete a Network Interface
    # @param network_id [String] Network ID
    # @param network_interface_id [String] Network Interface ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_networks_network_interfaces_delete_with_http_info(network_id, network_interface_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworksApi.v1_networks_network_interfaces_delete ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling NetworksApi.v1_networks_network_interfaces_delete"
      end
      # verify the required parameter 'network_interface_id' is set
      if @api_client.config.client_side_validation && network_interface_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_interface_id' when calling NetworksApi.v1_networks_network_interfaces_delete"
      end
      # resource path
      local_var_path = '/v1/networks/{network_id}/network-interfaces/{network_interface_id}'.sub('{' + 'network_id' + '}', CGI.escape(network_id.to_s)).sub('{' + 'network_interface_id' + '}', CGI.escape(network_interface_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworksApi.v1_networks_network_interfaces_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworksApi#v1_networks_network_interfaces_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Network Interface's information
    # @param network_id [String] Network ID
    # @param network_interface_id [String] Network Interface ID
    # @param [Hash] opts the optional parameters
    # @return [NetworkInterface]
    def v1_networks_network_interfaces_get(network_id, network_interface_id, opts = {})
      data, _status_code, _headers = v1_networks_network_interfaces_get_with_http_info(network_id, network_interface_id, opts)
      data
    end

    # Get a Network Interface&#39;s information
    # @param network_id [String] Network ID
    # @param network_interface_id [String] Network Interface ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkInterface, Integer, Hash)>] NetworkInterface data, response status code and response headers
    def v1_networks_network_interfaces_get_with_http_info(network_id, network_interface_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworksApi.v1_networks_network_interfaces_get ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling NetworksApi.v1_networks_network_interfaces_get"
      end
      # verify the required parameter 'network_interface_id' is set
      if @api_client.config.client_side_validation && network_interface_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_interface_id' when calling NetworksApi.v1_networks_network_interfaces_get"
      end
      # resource path
      local_var_path = '/v1/networks/{network_id}/network-interfaces/{network_interface_id}'.sub('{' + 'network_id' + '}', CGI.escape(network_id.to_s)).sub('{' + 'network_interface_id' + '}', CGI.escape(network_interface_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkInterface'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworksApi.v1_networks_network_interfaces_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworksApi#v1_networks_network_interfaces_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Network Interfaces for this network
    # @param network_id [String] Network ID
    # @param [Hash] opts the optional parameters
    # @return [NetworkInterfaces]
    def v1_networks_network_interfaces_getall(network_id, opts = {})
      data, _status_code, _headers = v1_networks_network_interfaces_getall_with_http_info(network_id, opts)
      data
    end

    # Get all Network Interfaces for this network
    # @param network_id [String] Network ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkInterfaces, Integer, Hash)>] NetworkInterfaces data, response status code and response headers
    def v1_networks_network_interfaces_getall_with_http_info(network_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworksApi.v1_networks_network_interfaces_getall ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling NetworksApi.v1_networks_network_interfaces_getall"
      end
      # resource path
      local_var_path = '/v1/networks/{network_id}/network-interfaces'.sub('{' + 'network_id' + '}', CGI.escape(network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkInterfaces'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworksApi.v1_networks_network_interfaces_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworksApi#v1_networks_network_interfaces_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform Network Interface addition, deletion, and listing
    # @param network_id [String] Network ID
    # @param [Hash] opts the optional parameters
    # @option opts [NetworkInterfaceCreate] :body Create a Network Interface
    # @return [NetworkInterface]
    def v1_networks_network_interfaces_post(network_id, opts = {})
      data, _status_code, _headers = v1_networks_network_interfaces_post_with_http_info(network_id, opts)
      data
    end

    # Perform Network Interface addition, deletion, and listing
    # @param network_id [String] Network ID
    # @param [Hash] opts the optional parameters
    # @option opts [NetworkInterfaceCreate] :body Create a Network Interface
    # @return [Array<(NetworkInterface, Integer, Hash)>] NetworkInterface data, response status code and response headers
    def v1_networks_network_interfaces_post_with_http_info(network_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworksApi.v1_networks_network_interfaces_post ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling NetworksApi.v1_networks_network_interfaces_post"
      end
      # resource path
      local_var_path = '/v1/networks/{network_id}/network-interfaces'.sub('{' + 'network_id' + '}', CGI.escape(network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkInterface'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworksApi.v1_networks_network_interfaces_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworksApi#v1_networks_network_interfaces_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Network Interface's information
    # @param network_id [String] Network ID
    # @param network_interface_id [String] Network Interface ID
    # @param body [NetworkInterfaceUpdate] Parameters for updating a Network Interface
    # @param [Hash] opts the optional parameters
    # @return [NetworkInterface]
    def v1_networks_network_interfaces_put(network_id, network_interface_id, body, opts = {})
      data, _status_code, _headers = v1_networks_network_interfaces_put_with_http_info(network_id, network_interface_id, body, opts)
      data
    end

    # Update a Network Interface&#39;s information
    # @param network_id [String] Network ID
    # @param network_interface_id [String] Network Interface ID
    # @param body [NetworkInterfaceUpdate] Parameters for updating a Network Interface
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkInterface, Integer, Hash)>] NetworkInterface data, response status code and response headers
    def v1_networks_network_interfaces_put_with_http_info(network_id, network_interface_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworksApi.v1_networks_network_interfaces_put ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling NetworksApi.v1_networks_network_interfaces_put"
      end
      # verify the required parameter 'network_interface_id' is set
      if @api_client.config.client_side_validation && network_interface_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_interface_id' when calling NetworksApi.v1_networks_network_interfaces_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NetworksApi.v1_networks_network_interfaces_put"
      end
      # resource path
      local_var_path = '/v1/networks/{network_id}/network-interfaces/{network_interface_id}'.sub('{' + 'network_id' + '}', CGI.escape(network_id.to_s)).sub('{' + 'network_interface_id' + '}', CGI.escape(network_interface_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkInterface'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"NetworksApi.v1_networks_network_interfaces_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworksApi#v1_networks_network_interfaces_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
