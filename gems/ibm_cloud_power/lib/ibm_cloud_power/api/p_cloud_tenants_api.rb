=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module IbmCloudPower
  class PCloudTenantsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a Tenant's current state/information
    # @param tenant_id [String] Tenant ID of a pcloud tenant
    # @param [Hash] opts the optional parameters
    # @return [Tenant]
    def pcloud_tenants_get(tenant_id, opts = {})
      data, _status_code, _headers = pcloud_tenants_get_with_http_info(tenant_id, opts)
      data
    end

    # Get a Tenant&#39;s current state/information
    # @param tenant_id [String] Tenant ID of a pcloud tenant
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tenant, Integer, Hash)>] Tenant data, response status code and response headers
    def pcloud_tenants_get_with_http_info(tenant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudTenantsApi.pcloud_tenants_get ...'
      end
      # verify the required parameter 'tenant_id' is set
      if @api_client.config.client_side_validation && tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_id' when calling PCloudTenantsApi.pcloud_tenants_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/tenants/{tenant_id}'.sub('{' + 'tenant_id' + '}', CGI.escape(tenant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Tenant'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudTenantsApi.pcloud_tenants_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudTenantsApi#pcloud_tenants_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a tenant
    # @param tenant_id [String] Tenant ID of a pcloud tenant
    # @param body [TenantUpdate] Parameters for updating a Tenant
    # @param [Hash] opts the optional parameters
    # @return [Tenant]
    def pcloud_tenants_put(tenant_id, body, opts = {})
      data, _status_code, _headers = pcloud_tenants_put_with_http_info(tenant_id, body, opts)
      data
    end

    # Update a tenant
    # @param tenant_id [String] Tenant ID of a pcloud tenant
    # @param body [TenantUpdate] Parameters for updating a Tenant
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tenant, Integer, Hash)>] Tenant data, response status code and response headers
    def pcloud_tenants_put_with_http_info(tenant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudTenantsApi.pcloud_tenants_put ...'
      end
      # verify the required parameter 'tenant_id' is set
      if @api_client.config.client_side_validation && tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_id' when calling PCloudTenantsApi.pcloud_tenants_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudTenantsApi.pcloud_tenants_put"
      end
      # resource path
      local_var_path = '/pcloud/v1/tenants/{tenant_id}'.sub('{' + 'tenant_id' + '}', CGI.escape(tenant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Tenant'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudTenantsApi.pcloud_tenants_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudTenantsApi#pcloud_tenants_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
