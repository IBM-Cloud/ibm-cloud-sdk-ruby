=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module IbmCloudPower
  class HostGroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List all the hosts that can be reserved
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, AvailableHost>]
    def v1_available_hosts(opts = {})
      data, _status_code, _headers = v1_available_hosts_with_http_info(opts)
      data
    end

    # List all the hosts that can be reserved
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, AvailableHost>, Integer, Hash)>] Hash<String, AvailableHost> data, response status code and response headers
    def v1_available_hosts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostGroupsApi.v1_available_hosts ...'
      end
      # resource path
      local_var_path = '/v1/available-hosts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, AvailableHost>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"HostGroupsApi.v1_available_hosts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostGroupsApi#v1_available_hosts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of host groups for the workspace
    # @param [Hash] opts the optional parameters
    # @return [Array<HostGroup>]
    def v1_host_groups_get(opts = {})
      data, _status_code, _headers = v1_host_groups_get_with_http_info(opts)
      data
    end

    # Get the list of host groups for the workspace
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<HostGroup>, Integer, Hash)>] Array<HostGroup> data, response status code and response headers
    def v1_host_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostGroupsApi.v1_host_groups_get ...'
      end
      # resource path
      local_var_path = '/v1/host-groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<HostGroup>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"HostGroupsApi.v1_host_groups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostGroupsApi#v1_host_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the details of a host group
    # @param host_group_id [String] Hostgroup ID
    # @param [Hash] opts the optional parameters
    # @return [HostGroup]
    def v1_host_groups_id_get(host_group_id, opts = {})
      data, _status_code, _headers = v1_host_groups_id_get_with_http_info(host_group_id, opts)
      data
    end

    # Get the details of a host group
    # @param host_group_id [String] Hostgroup ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(HostGroup, Integer, Hash)>] HostGroup data, response status code and response headers
    def v1_host_groups_id_get_with_http_info(host_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostGroupsApi.v1_host_groups_id_get ...'
      end
      # verify the required parameter 'host_group_id' is set
      if @api_client.config.client_side_validation && host_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_group_id' when calling HostGroupsApi.v1_host_groups_id_get"
      end
      # resource path
      local_var_path = '/v1/host-groups/{host_group_id}'.sub('{' + 'host_group_id' + '}', CGI.escape(host_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HostGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"HostGroupsApi.v1_host_groups_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostGroupsApi#v1_host_groups_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Share/unshare a host group with another workspace
    # @param host_group_id [String] Hostgroup ID
    # @param body [HostGroupShareOp] Parameters to set the sharing status of the host group
    # @param [Hash] opts the optional parameters
    # @return [HostGroup]
    def v1_host_groups_id_put(host_group_id, body, opts = {})
      data, _status_code, _headers = v1_host_groups_id_put_with_http_info(host_group_id, body, opts)
      data
    end

    # Share/unshare a host group with another workspace
    # @param host_group_id [String] Hostgroup ID
    # @param body [HostGroupShareOp] Parameters to set the sharing status of the host group
    # @param [Hash] opts the optional parameters
    # @return [Array<(HostGroup, Integer, Hash)>] HostGroup data, response status code and response headers
    def v1_host_groups_id_put_with_http_info(host_group_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostGroupsApi.v1_host_groups_id_put ...'
      end
      # verify the required parameter 'host_group_id' is set
      if @api_client.config.client_side_validation && host_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_group_id' when calling HostGroupsApi.v1_host_groups_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling HostGroupsApi.v1_host_groups_id_put"
      end
      # resource path
      local_var_path = '/v1/host-groups/{host_group_id}'.sub('{' + 'host_group_id' + '}', CGI.escape(host_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'HostGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"HostGroupsApi.v1_host_groups_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostGroupsApi#v1_host_groups_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a host group with one (or more) host
    # @param body [HostGroupCreate] Parameters for the creation of a new host group
    # @param [Hash] opts the optional parameters
    # @return [HostGroup]
    def v1_host_groups_post(body, opts = {})
      data, _status_code, _headers = v1_host_groups_post_with_http_info(body, opts)
      data
    end

    # Create a host group with one (or more) host
    # @param body [HostGroupCreate] Parameters for the creation of a new host group
    # @param [Hash] opts the optional parameters
    # @return [Array<(HostGroup, Integer, Hash)>] HostGroup data, response status code and response headers
    def v1_host_groups_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostGroupsApi.v1_host_groups_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling HostGroupsApi.v1_host_groups_post"
      end
      # resource path
      local_var_path = '/v1/host-groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'HostGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"HostGroupsApi.v1_host_groups_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostGroupsApi#v1_host_groups_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of all the hosts the workspace has access to
    # @param [Hash] opts the optional parameters
    # @return [Array<Host>]
    def v1_hosts_get(opts = {})
      data, _status_code, _headers = v1_hosts_get_with_http_info(opts)
      data
    end

    # Get the list of all the hosts the workspace has access to
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Host>, Integer, Hash)>] Array<Host> data, response status code and response headers
    def v1_hosts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostGroupsApi.v1_hosts_get ...'
      end
      # resource path
      local_var_path = '/v1/hosts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Host>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"HostGroupsApi.v1_hosts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostGroupsApi#v1_hosts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Release a host from its host group
    # @param host_id [String] Host ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_hosts_id_delete(host_id, opts = {})
      data, _status_code, _headers = v1_hosts_id_delete_with_http_info(host_id, opts)
      data
    end

    # Release a host from its host group
    # @param host_id [String] Host ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_hosts_id_delete_with_http_info(host_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostGroupsApi.v1_hosts_id_delete ...'
      end
      # verify the required parameter 'host_id' is set
      if @api_client.config.client_side_validation && host_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_id' when calling HostGroupsApi.v1_hosts_id_delete"
      end
      # resource path
      local_var_path = '/v1/hosts/{host_id}'.sub('{' + 'host_id' + '}', CGI.escape(host_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"HostGroupsApi.v1_hosts_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostGroupsApi#v1_hosts_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the details about a host
    # @param host_id [String] Host ID
    # @param [Hash] opts the optional parameters
    # @return [Host]
    def v1_hosts_id_get(host_id, opts = {})
      data, _status_code, _headers = v1_hosts_id_get_with_http_info(host_id, opts)
      data
    end

    # Get the details about a host
    # @param host_id [String] Host ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Host, Integer, Hash)>] Host data, response status code and response headers
    def v1_hosts_id_get_with_http_info(host_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostGroupsApi.v1_hosts_id_get ...'
      end
      # verify the required parameter 'host_id' is set
      if @api_client.config.client_side_validation && host_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_id' when calling HostGroupsApi.v1_hosts_id_get"
      end
      # resource path
      local_var_path = '/v1/hosts/{host_id}'.sub('{' + 'host_id' + '}', CGI.escape(host_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Host'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"HostGroupsApi.v1_hosts_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostGroupsApi#v1_hosts_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify the display name of a host
    # @param host_id [String] Host ID
    # @param body [HostPut] Parameters to modify a host
    # @param [Hash] opts the optional parameters
    # @return [Host]
    def v1_hosts_id_put(host_id, body, opts = {})
      data, _status_code, _headers = v1_hosts_id_put_with_http_info(host_id, body, opts)
      data
    end

    # Modify the display name of a host
    # @param host_id [String] Host ID
    # @param body [HostPut] Parameters to modify a host
    # @param [Hash] opts the optional parameters
    # @return [Array<(Host, Integer, Hash)>] Host data, response status code and response headers
    def v1_hosts_id_put_with_http_info(host_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostGroupsApi.v1_hosts_id_put ...'
      end
      # verify the required parameter 'host_id' is set
      if @api_client.config.client_side_validation && host_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_id' when calling HostGroupsApi.v1_hosts_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling HostGroupsApi.v1_hosts_id_put"
      end
      # resource path
      local_var_path = '/v1/hosts/{host_id}'.sub('{' + 'host_id' + '}', CGI.escape(host_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Host'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"HostGroupsApi.v1_hosts_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostGroupsApi#v1_hosts_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add new host(s) to an existing host group
    # @param body [HostCreate] Parameters to add a host to an existing host group
    # @param [Hash] opts the optional parameters
    # @return [Array<Host>]
    def v1_hosts_post(body, opts = {})
      data, _status_code, _headers = v1_hosts_post_with_http_info(body, opts)
      data
    end

    # Add new host(s) to an existing host group
    # @param body [HostCreate] Parameters to add a host to an existing host group
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Host>, Integer, Hash)>] Array<Host> data, response status code and response headers
    def v1_hosts_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HostGroupsApi.v1_hosts_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling HostGroupsApi.v1_hosts_post"
      end
      # resource path
      local_var_path = '/v1/hosts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Host>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"HostGroupsApi.v1_hosts_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HostGroupsApi#v1_hosts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
