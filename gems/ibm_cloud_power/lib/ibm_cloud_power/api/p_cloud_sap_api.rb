=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module IbmCloudPower
  class PCloudSAPApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the information on an SAP profile
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param sap_profile_id [String] SAP Profile ID
    # @param [Hash] opts the optional parameters
    # @return [SAPProfile]
    def pcloud_sap_get(cloud_instance_id, sap_profile_id, opts = {})
      data, _status_code, _headers = pcloud_sap_get_with_http_info(cloud_instance_id, sap_profile_id, opts)
      data
    end

    # Get the information on an SAP profile
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param sap_profile_id [String] SAP Profile ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SAPProfile, Integer, Hash)>] SAPProfile data, response status code and response headers
    def pcloud_sap_get_with_http_info(cloud_instance_id, sap_profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudSAPApi.pcloud_sap_get ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudSAPApi.pcloud_sap_get"
      end
      # verify the required parameter 'sap_profile_id' is set
      if @api_client.config.client_side_validation && sap_profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'sap_profile_id' when calling PCloudSAPApi.pcloud_sap_get"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/sap/{sap_profile_id}'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s)).sub('{' + 'sap_profile_id' + '}', CGI.escape(sap_profile_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SAPProfile'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudSAPApi.pcloud_sap_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudSAPApi#pcloud_sap_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of SAP profiles
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :profile_prefix SAP profile prefix to filter by
    # @option opts [String] :profile_family SAP profile family to filter by
    # @return [SAPProfiles]
    def pcloud_sap_getall(cloud_instance_id, opts = {})
      data, _status_code, _headers = pcloud_sap_getall_with_http_info(cloud_instance_id, opts)
      data
    end

    # Get list of SAP profiles
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param [Hash] opts the optional parameters
    # @option opts [String] :profile_prefix SAP profile prefix to filter by
    # @option opts [String] :profile_family SAP profile family to filter by
    # @return [Array<(SAPProfiles, Integer, Hash)>] SAPProfiles data, response status code and response headers
    def pcloud_sap_getall_with_http_info(cloud_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudSAPApi.pcloud_sap_getall ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudSAPApi.pcloud_sap_getall"
      end
      allowable_values = ["bh1", "bh2", "ch1", "ch2", "mh1", "mh2", "umh", "ush1", "sh2", "sr2"]
      if @api_client.config.client_side_validation && opts[:'profile_prefix'] && !allowable_values.include?(opts[:'profile_prefix'])
        fail ArgumentError, "invalid value for \"profile_prefix\", must be one of #{allowable_values}"
      end
      allowable_values = ["balanced", "compute", "memory", "sap-rise", "small", "ultra-memory"]
      if @api_client.config.client_side_validation && opts[:'profile_family'] && !allowable_values.include?(opts[:'profile_family'])
        fail ArgumentError, "invalid value for \"profile_family\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/sap'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'profile_prefix'] = opts[:'profile_prefix'] if !opts[:'profile_prefix'].nil?
      query_params[:'profile_family'] = opts[:'profile_family'] if !opts[:'profile_family'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SAPProfiles'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudSAPApi.pcloud_sap_getall",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudSAPApi#pcloud_sap_getall\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new SAP PVM Instance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [SAPCreate] Parameters for the creation of a new SAP PVM Instance
    # @param [Hash] opts the optional parameters
    # @return [Array<PVMInstance>]
    def pcloud_sap_post(cloud_instance_id, body, opts = {})
      data, _status_code, _headers = pcloud_sap_post_with_http_info(cloud_instance_id, body, opts)
      data
    end

    # Create a new SAP PVM Instance
    # @param cloud_instance_id [String] Cloud Instance ID of a PCloud Instance
    # @param body [SAPCreate] Parameters for the creation of a new SAP PVM Instance
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PVMInstance>, Integer, Hash)>] Array<PVMInstance> data, response status code and response headers
    def pcloud_sap_post_with_http_info(cloud_instance_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PCloudSAPApi.pcloud_sap_post ...'
      end
      # verify the required parameter 'cloud_instance_id' is set
      if @api_client.config.client_side_validation && cloud_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_instance_id' when calling PCloudSAPApi.pcloud_sap_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PCloudSAPApi.pcloud_sap_post"
      end
      # resource path
      local_var_path = '/pcloud/v1/cloud-instances/{cloud_instance_id}/sap'.sub('{' + 'cloud_instance_id' + '}', CGI.escape(cloud_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PVMInstance>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OauthSecurity']

      new_options = opts.merge(
        :operation => :"PCloudSAPApi.pcloud_sap_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PCloudSAPApi#pcloud_sap_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
