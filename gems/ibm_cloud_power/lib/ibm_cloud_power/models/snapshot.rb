=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module IbmCloudPower
  class Snapshot
    # Action performed on the instance snapshot
    attr_accessor :action

    # Creation Date
    attr_accessor :creation_date

    # Description of the PVM instance snapshot
    attr_accessor :description

    # Last Update Date
    attr_accessor :last_update_date

    # Name of the PVM instance snapshot
    attr_accessor :name

    # Snapshot completion percentage
    attr_accessor :percent_complete

    # PCloud PVM Instance ID
    attr_accessor :pvm_instance_id

    # ID of the PVM instance snapshot
    attr_accessor :snapshot_id

    # Status of the PVM instance snapshot
    attr_accessor :status

    # Detailed information for the last PVM instance snapshot action
    attr_accessor :status_detail

    # A map of volume snapshots included in the PVM instance snapshot
    attr_accessor :volume_snapshots

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'action' => :'action',
        :'creation_date' => :'creationDate',
        :'description' => :'description',
        :'last_update_date' => :'lastUpdateDate',
        :'name' => :'name',
        :'percent_complete' => :'percentComplete',
        :'pvm_instance_id' => :'pvmInstanceID',
        :'snapshot_id' => :'snapshotID',
        :'status' => :'status',
        :'status_detail' => :'statusDetail',
        :'volume_snapshots' => :'volumeSnapshots'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'action' => :'String',
        :'creation_date' => :'Time',
        :'description' => :'String',
        :'last_update_date' => :'Time',
        :'name' => :'String',
        :'percent_complete' => :'Integer',
        :'pvm_instance_id' => :'String',
        :'snapshot_id' => :'String',
        :'status' => :'String',
        :'status_detail' => :'String',
        :'volume_snapshots' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IbmCloudPower::Snapshot` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IbmCloudPower::Snapshot`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'action')
        self.action = attributes[:'action']
      end

      if attributes.key?(:'creation_date')
        self.creation_date = attributes[:'creation_date']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'last_update_date')
        self.last_update_date = attributes[:'last_update_date']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'percent_complete')
        self.percent_complete = attributes[:'percent_complete']
      end

      if attributes.key?(:'pvm_instance_id')
        self.pvm_instance_id = attributes[:'pvm_instance_id']
      else
        self.pvm_instance_id = nil
      end

      if attributes.key?(:'snapshot_id')
        self.snapshot_id = attributes[:'snapshot_id']
      else
        self.snapshot_id = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'status_detail')
        self.status_detail = attributes[:'status_detail']
      end

      if attributes.key?(:'volume_snapshots')
        if (value = attributes[:'volume_snapshots']).is_a?(Hash)
          self.volume_snapshots = value
        end
      else
        self.volume_snapshots = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @pvm_instance_id.nil?
        invalid_properties.push('invalid value for "pvm_instance_id", pvm_instance_id cannot be nil.')
      end

      if @snapshot_id.nil?
        invalid_properties.push('invalid value for "snapshot_id", snapshot_id cannot be nil.')
      end

      if @volume_snapshots.nil?
        invalid_properties.push('invalid value for "volume_snapshots", volume_snapshots cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @name.nil?
      return false if @pvm_instance_id.nil?
      return false if @snapshot_id.nil?
      return false if @volume_snapshots.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] pvm_instance_id Value to be assigned
    def pvm_instance_id=(pvm_instance_id)
      if pvm_instance_id.nil?
        fail ArgumentError, 'pvm_instance_id cannot be nil'
      end

      @pvm_instance_id = pvm_instance_id
    end

    # Custom attribute writer method with validation
    # @param [Object] snapshot_id Value to be assigned
    def snapshot_id=(snapshot_id)
      if snapshot_id.nil?
        fail ArgumentError, 'snapshot_id cannot be nil'
      end

      @snapshot_id = snapshot_id
    end

    # Custom attribute writer method with validation
    # @param [Object] volume_snapshots Value to be assigned
    def volume_snapshots=(volume_snapshots)
      if volume_snapshots.nil?
        fail ArgumentError, 'volume_snapshots cannot be nil'
      end

      @volume_snapshots = volume_snapshots
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          action == o.action &&
          creation_date == o.creation_date &&
          description == o.description &&
          last_update_date == o.last_update_date &&
          name == o.name &&
          percent_complete == o.percent_complete &&
          pvm_instance_id == o.pvm_instance_id &&
          snapshot_id == o.snapshot_id &&
          status == o.status &&
          status_detail == o.status_detail &&
          volume_snapshots == o.volume_snapshots
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [action, creation_date, description, last_update_date, name, percent_complete, pvm_instance_id, snapshot_id, status, status_detail, volume_snapshots].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IbmCloudPower.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
