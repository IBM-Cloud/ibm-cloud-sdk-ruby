=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module IbmCloudPower
  # Description of a PPCaaS Pod
  class PodData
    # Number of available cores in the Pod
    attr_accessor :cores

    # Amount of available memory in the Pod (GB)
    attr_accessor :memory

    # ID of the Satellite Location
    attr_accessor :sat_location_id

    # Amount of available storage in the Pod (GB)
    attr_accessor :storage

    # Total number of usable cores in the Pod
    attr_accessor :total_cores

    # Total amount of usable memory in the Pod (GB)
    attr_accessor :total_memory

    # Total number of physical cores in the Pod
    attr_accessor :total_phys_cores

    # Total amount of physical memory in the Pod (GB)
    attr_accessor :total_phys_memory

    # Total amount of physical storage in the Pod (GB)
    attr_accessor :total_phys_storage

    # Total amount of usable storage in the Pod (GB)
    attr_accessor :total_storage

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cores' => :'cores',
        :'memory' => :'memory',
        :'sat_location_id' => :'satLocationID',
        :'storage' => :'storage',
        :'total_cores' => :'totalCores',
        :'total_memory' => :'totalMemory',
        :'total_phys_cores' => :'totalPhysCores',
        :'total_phys_memory' => :'totalPhysMemory',
        :'total_phys_storage' => :'totalPhysStorage',
        :'total_storage' => :'totalStorage'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cores' => :'Float',
        :'memory' => :'Integer',
        :'sat_location_id' => :'String',
        :'storage' => :'Integer',
        :'total_cores' => :'Float',
        :'total_memory' => :'Integer',
        :'total_phys_cores' => :'Float',
        :'total_phys_memory' => :'Integer',
        :'total_phys_storage' => :'Float',
        :'total_storage' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IbmCloudPower::PodData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IbmCloudPower::PodData`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cores')
        self.cores = attributes[:'cores']
      else
        self.cores = nil
      end

      if attributes.key?(:'memory')
        self.memory = attributes[:'memory']
      else
        self.memory = nil
      end

      if attributes.key?(:'sat_location_id')
        self.sat_location_id = attributes[:'sat_location_id']
      else
        self.sat_location_id = nil
      end

      if attributes.key?(:'storage')
        self.storage = attributes[:'storage']
      else
        self.storage = nil
      end

      if attributes.key?(:'total_cores')
        self.total_cores = attributes[:'total_cores']
      else
        self.total_cores = nil
      end

      if attributes.key?(:'total_memory')
        self.total_memory = attributes[:'total_memory']
      else
        self.total_memory = nil
      end

      if attributes.key?(:'total_phys_cores')
        self.total_phys_cores = attributes[:'total_phys_cores']
      else
        self.total_phys_cores = nil
      end

      if attributes.key?(:'total_phys_memory')
        self.total_phys_memory = attributes[:'total_phys_memory']
      else
        self.total_phys_memory = nil
      end

      if attributes.key?(:'total_phys_storage')
        self.total_phys_storage = attributes[:'total_phys_storage']
      else
        self.total_phys_storage = nil
      end

      if attributes.key?(:'total_storage')
        self.total_storage = attributes[:'total_storage']
      else
        self.total_storage = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @cores.nil?
        invalid_properties.push('invalid value for "cores", cores cannot be nil.')
      end

      if @memory.nil?
        invalid_properties.push('invalid value for "memory", memory cannot be nil.')
      end

      if @sat_location_id.nil?
        invalid_properties.push('invalid value for "sat_location_id", sat_location_id cannot be nil.')
      end

      if @storage.nil?
        invalid_properties.push('invalid value for "storage", storage cannot be nil.')
      end

      if @total_cores.nil?
        invalid_properties.push('invalid value for "total_cores", total_cores cannot be nil.')
      end

      if @total_memory.nil?
        invalid_properties.push('invalid value for "total_memory", total_memory cannot be nil.')
      end

      if @total_phys_cores.nil?
        invalid_properties.push('invalid value for "total_phys_cores", total_phys_cores cannot be nil.')
      end

      if @total_phys_memory.nil?
        invalid_properties.push('invalid value for "total_phys_memory", total_phys_memory cannot be nil.')
      end

      if @total_phys_storage.nil?
        invalid_properties.push('invalid value for "total_phys_storage", total_phys_storage cannot be nil.')
      end

      if @total_storage.nil?
        invalid_properties.push('invalid value for "total_storage", total_storage cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @cores.nil?
      return false if @memory.nil?
      return false if @sat_location_id.nil?
      return false if @storage.nil?
      return false if @total_cores.nil?
      return false if @total_memory.nil?
      return false if @total_phys_cores.nil?
      return false if @total_phys_memory.nil?
      return false if @total_phys_storage.nil?
      return false if @total_storage.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] cores Value to be assigned
    def cores=(cores)
      if cores.nil?
        fail ArgumentError, 'cores cannot be nil'
      end

      @cores = cores
    end

    # Custom attribute writer method with validation
    # @param [Object] memory Value to be assigned
    def memory=(memory)
      if memory.nil?
        fail ArgumentError, 'memory cannot be nil'
      end

      @memory = memory
    end

    # Custom attribute writer method with validation
    # @param [Object] sat_location_id Value to be assigned
    def sat_location_id=(sat_location_id)
      if sat_location_id.nil?
        fail ArgumentError, 'sat_location_id cannot be nil'
      end

      @sat_location_id = sat_location_id
    end

    # Custom attribute writer method with validation
    # @param [Object] storage Value to be assigned
    def storage=(storage)
      if storage.nil?
        fail ArgumentError, 'storage cannot be nil'
      end

      @storage = storage
    end

    # Custom attribute writer method with validation
    # @param [Object] total_cores Value to be assigned
    def total_cores=(total_cores)
      if total_cores.nil?
        fail ArgumentError, 'total_cores cannot be nil'
      end

      @total_cores = total_cores
    end

    # Custom attribute writer method with validation
    # @param [Object] total_memory Value to be assigned
    def total_memory=(total_memory)
      if total_memory.nil?
        fail ArgumentError, 'total_memory cannot be nil'
      end

      @total_memory = total_memory
    end

    # Custom attribute writer method with validation
    # @param [Object] total_phys_cores Value to be assigned
    def total_phys_cores=(total_phys_cores)
      if total_phys_cores.nil?
        fail ArgumentError, 'total_phys_cores cannot be nil'
      end

      @total_phys_cores = total_phys_cores
    end

    # Custom attribute writer method with validation
    # @param [Object] total_phys_memory Value to be assigned
    def total_phys_memory=(total_phys_memory)
      if total_phys_memory.nil?
        fail ArgumentError, 'total_phys_memory cannot be nil'
      end

      @total_phys_memory = total_phys_memory
    end

    # Custom attribute writer method with validation
    # @param [Object] total_phys_storage Value to be assigned
    def total_phys_storage=(total_phys_storage)
      if total_phys_storage.nil?
        fail ArgumentError, 'total_phys_storage cannot be nil'
      end

      @total_phys_storage = total_phys_storage
    end

    # Custom attribute writer method with validation
    # @param [Object] total_storage Value to be assigned
    def total_storage=(total_storage)
      if total_storage.nil?
        fail ArgumentError, 'total_storage cannot be nil'
      end

      @total_storage = total_storage
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cores == o.cores &&
          memory == o.memory &&
          sat_location_id == o.sat_location_id &&
          storage == o.storage &&
          total_cores == o.total_cores &&
          total_memory == o.total_memory &&
          total_phys_cores == o.total_phys_cores &&
          total_phys_memory == o.total_phys_memory &&
          total_phys_storage == o.total_phys_storage &&
          total_storage == o.total_storage
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cores, memory, sat_location_id, storage, total_cores, total_memory, total_phys_cores, total_phys_memory, total_phys_storage, total_storage].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IbmCloudPower.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
