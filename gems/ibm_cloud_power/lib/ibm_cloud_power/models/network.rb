=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module IbmCloudPower
  class Network
    attr_accessor :access_config

    # Network in CIDR notation (192.168.0.0/24)
    attr_accessor :cidr

    # (currently not available) cloud connections this network is attached
    attr_accessor :cloud_connections

    # The CRN for this resource
    attr_accessor :crn

    # DHCP Managed Network
    attr_accessor :dhcp_managed

    # DNS Servers
    attr_accessor :dns_servers

    # Gateway IP Address
    attr_accessor :gateway

    attr_accessor :ip_address_metrics

    # IP Address Ranges
    attr_accessor :ip_address_ranges

    # (deprecated - replaced by mtu) Enable MTU Jumbo Network (for multi-zone locations only)
    attr_accessor :jumbo

    # Maximum transmission unit
    attr_accessor :mtu

    # Network Name
    attr_accessor :name

    # Unique Network ID
    attr_accessor :network_id

    # Public IP Address Ranges (for pub-vlan networks)
    attr_accessor :public_ip_address_ranges

    # Type of Network - 'vlan' (private network) 'pub-vlan' (public network) 'dhcp-vlan' (for satellite locations only)
    attr_accessor :type

    # VLAN ID
    attr_accessor :vlan_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'access_config' => :'accessConfig',
        :'cidr' => :'cidr',
        :'cloud_connections' => :'cloudConnections',
        :'crn' => :'crn',
        :'dhcp_managed' => :'dhcpManaged',
        :'dns_servers' => :'dnsServers',
        :'gateway' => :'gateway',
        :'ip_address_metrics' => :'ipAddressMetrics',
        :'ip_address_ranges' => :'ipAddressRanges',
        :'jumbo' => :'jumbo',
        :'mtu' => :'mtu',
        :'name' => :'name',
        :'network_id' => :'networkID',
        :'public_ip_address_ranges' => :'publicIPAddressRanges',
        :'type' => :'type',
        :'vlan_id' => :'vlanID'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'access_config' => :'AccessConfig',
        :'cidr' => :'String',
        :'cloud_connections' => :'Array<NetworkCloudConnectionsInner>',
        :'crn' => :'String',
        :'dhcp_managed' => :'Boolean',
        :'dns_servers' => :'Array<String>',
        :'gateway' => :'String',
        :'ip_address_metrics' => :'NetworkIpAddressMetrics',
        :'ip_address_ranges' => :'Array<IPAddressRange>',
        :'jumbo' => :'Boolean',
        :'mtu' => :'Integer',
        :'name' => :'String',
        :'network_id' => :'String',
        :'public_ip_address_ranges' => :'Array<IPAddressRange>',
        :'type' => :'String',
        :'vlan_id' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IbmCloudPower::Network` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IbmCloudPower::Network`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'access_config')
        self.access_config = attributes[:'access_config']
      end

      if attributes.key?(:'cidr')
        self.cidr = attributes[:'cidr']
      else
        self.cidr = nil
      end

      if attributes.key?(:'cloud_connections')
        if (value = attributes[:'cloud_connections']).is_a?(Array)
          self.cloud_connections = value
        end
      end

      if attributes.key?(:'crn')
        self.crn = attributes[:'crn']
      end

      if attributes.key?(:'dhcp_managed')
        self.dhcp_managed = attributes[:'dhcp_managed']
      end

      if attributes.key?(:'dns_servers')
        if (value = attributes[:'dns_servers']).is_a?(Array)
          self.dns_servers = value
        end
      else
        self.dns_servers = nil
      end

      if attributes.key?(:'gateway')
        self.gateway = attributes[:'gateway']
      end

      if attributes.key?(:'ip_address_metrics')
        self.ip_address_metrics = attributes[:'ip_address_metrics']
      else
        self.ip_address_metrics = nil
      end

      if attributes.key?(:'ip_address_ranges')
        if (value = attributes[:'ip_address_ranges']).is_a?(Array)
          self.ip_address_ranges = value
        end
      else
        self.ip_address_ranges = nil
      end

      if attributes.key?(:'jumbo')
        self.jumbo = attributes[:'jumbo']
      end

      if attributes.key?(:'mtu')
        self.mtu = attributes[:'mtu']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'network_id')
        self.network_id = attributes[:'network_id']
      else
        self.network_id = nil
      end

      if attributes.key?(:'public_ip_address_ranges')
        if (value = attributes[:'public_ip_address_ranges']).is_a?(Array)
          self.public_ip_address_ranges = value
        end
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = 'vlan'
      end

      if attributes.key?(:'vlan_id')
        self.vlan_id = attributes[:'vlan_id']
      else
        self.vlan_id = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @cidr.nil?
        invalid_properties.push('invalid value for "cidr", cidr cannot be nil.')
      end

      if @dns_servers.nil?
        invalid_properties.push('invalid value for "dns_servers", dns_servers cannot be nil.')
      end

      if @ip_address_metrics.nil?
        invalid_properties.push('invalid value for "ip_address_metrics", ip_address_metrics cannot be nil.')
      end

      if @ip_address_ranges.nil?
        invalid_properties.push('invalid value for "ip_address_ranges", ip_address_ranges cannot be nil.')
      end

      if !@mtu.nil? && @mtu > 9000
        invalid_properties.push('invalid value for "mtu", must be smaller than or equal to 9000.')
      end

      if !@mtu.nil? && @mtu < 1450
        invalid_properties.push('invalid value for "mtu", must be greater than or equal to 1450.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @network_id.nil?
        invalid_properties.push('invalid value for "network_id", network_id cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @vlan_id.nil?
        invalid_properties.push('invalid value for "vlan_id", vlan_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @cidr.nil?
      return false if @dns_servers.nil?
      return false if @ip_address_metrics.nil?
      return false if @ip_address_ranges.nil?
      return false if !@mtu.nil? && @mtu > 9000
      return false if !@mtu.nil? && @mtu < 1450
      return false if @name.nil?
      return false if @network_id.nil?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["vlan", "pub-vlan", "dhcp-vlan"])
      return false unless type_validator.valid?(@type)
      return false if @vlan_id.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] cidr Value to be assigned
    def cidr=(cidr)
      if cidr.nil?
        fail ArgumentError, 'cidr cannot be nil'
      end

      @cidr = cidr
    end

    # Custom attribute writer method with validation
    # @param [Object] dns_servers Value to be assigned
    def dns_servers=(dns_servers)
      if dns_servers.nil?
        fail ArgumentError, 'dns_servers cannot be nil'
      end

      @dns_servers = dns_servers
    end

    # Custom attribute writer method with validation
    # @param [Object] ip_address_metrics Value to be assigned
    def ip_address_metrics=(ip_address_metrics)
      if ip_address_metrics.nil?
        fail ArgumentError, 'ip_address_metrics cannot be nil'
      end

      @ip_address_metrics = ip_address_metrics
    end

    # Custom attribute writer method with validation
    # @param [Object] ip_address_ranges Value to be assigned
    def ip_address_ranges=(ip_address_ranges)
      if ip_address_ranges.nil?
        fail ArgumentError, 'ip_address_ranges cannot be nil'
      end

      @ip_address_ranges = ip_address_ranges
    end

    # Custom attribute writer method with validation
    # @param [Object] mtu Value to be assigned
    def mtu=(mtu)
      if mtu.nil?
        fail ArgumentError, 'mtu cannot be nil'
      end

      if mtu > 9000
        fail ArgumentError, 'invalid value for "mtu", must be smaller than or equal to 9000.'
      end

      if mtu < 1450
        fail ArgumentError, 'invalid value for "mtu", must be greater than or equal to 1450.'
      end

      @mtu = mtu
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] network_id Value to be assigned
    def network_id=(network_id)
      if network_id.nil?
        fail ArgumentError, 'network_id cannot be nil'
      end

      @network_id = network_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["vlan", "pub-vlan", "dhcp-vlan"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] vlan_id Value to be assigned
    def vlan_id=(vlan_id)
      if vlan_id.nil?
        fail ArgumentError, 'vlan_id cannot be nil'
      end

      @vlan_id = vlan_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          access_config == o.access_config &&
          cidr == o.cidr &&
          cloud_connections == o.cloud_connections &&
          crn == o.crn &&
          dhcp_managed == o.dhcp_managed &&
          dns_servers == o.dns_servers &&
          gateway == o.gateway &&
          ip_address_metrics == o.ip_address_metrics &&
          ip_address_ranges == o.ip_address_ranges &&
          jumbo == o.jumbo &&
          mtu == o.mtu &&
          name == o.name &&
          network_id == o.network_id &&
          public_ip_address_ranges == o.public_ip_address_ranges &&
          type == o.type &&
          vlan_id == o.vlan_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [access_config, cidr, cloud_connections, crn, dhcp_managed, dns_servers, gateway, ip_address_metrics, ip_address_ranges, jumbo, mtu, name, network_id, public_ip_address_ranges, type, vlan_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IbmCloudPower.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
