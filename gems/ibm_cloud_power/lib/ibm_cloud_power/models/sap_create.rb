=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module IbmCloudPower
  class SAPCreate
    attr_accessor :deployment_target

    # Custom SAP Deployment Type Information (For Internal Use Only)
    attr_accessor :deployment_type

    # Image ID of the sap image to use for the server
    attr_accessor :image_id

    attr_accessor :instances

    # Name of the sap pvm-instance
    attr_accessor :name

    # The pvm instance networks information
    attr_accessor :networks

    attr_accessor :pin_policy

    # The placement group for the server
    attr_accessor :placement_group

    # SAP Profile ID for the amount of cores and memory
    attr_accessor :profile_id

    # The name of the SSH Key to provide to the server for authenticating
    attr_accessor :ssh_key_name

    attr_accessor :storage_affinity

    # Storage Pool for server deployment; if provided then storageAffinity and storageType will be ignored; Only valid when you deploy one of the IBM supplied stock images. Storage pool for a custom image (an imported image or an image that is created from a PVMInstance capture) defaults to the storage pool the image was created in
    attr_accessor :storage_pool

    # Indicates if all volumes attached to the server must reside in the same storage pool; Defaults to true when initially deploying a PVMInstance
    attr_accessor :storage_pool_affinity

    # Storage type for server deployment; if storageType is not provided the storage type will default to 'tier3'.
    attr_accessor :storage_type

    # System type used to host the instance. Only e880, e980, e1080 are supported
    attr_accessor :sys_type

    # Cloud init user defined data; For FLS, only cloud-config user-data is supported and data must not be compressed or exceed 63K
    attr_accessor :user_data

    # List of user tags
    attr_accessor :user_tags

    # List of Volume IDs to attach to the pvm-instance on creation
    attr_accessor :volume_ids

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'deployment_target' => :'deploymentTarget',
        :'deployment_type' => :'deploymentType',
        :'image_id' => :'imageID',
        :'instances' => :'instances',
        :'name' => :'name',
        :'networks' => :'networks',
        :'pin_policy' => :'pinPolicy',
        :'placement_group' => :'placementGroup',
        :'profile_id' => :'profileID',
        :'ssh_key_name' => :'sshKeyName',
        :'storage_affinity' => :'storageAffinity',
        :'storage_pool' => :'storagePool',
        :'storage_pool_affinity' => :'storagePoolAffinity',
        :'storage_type' => :'storageType',
        :'sys_type' => :'sysType',
        :'user_data' => :'userData',
        :'user_tags' => :'userTags',
        :'volume_ids' => :'volumeIDs'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'deployment_target' => :'DeploymentTarget',
        :'deployment_type' => :'String',
        :'image_id' => :'String',
        :'instances' => :'PVMInstanceMultiCreate',
        :'name' => :'String',
        :'networks' => :'Array<PVMInstanceAddNetwork>',
        :'pin_policy' => :'PinPolicy',
        :'placement_group' => :'String',
        :'profile_id' => :'String',
        :'ssh_key_name' => :'String',
        :'storage_affinity' => :'StorageAffinity',
        :'storage_pool' => :'String',
        :'storage_pool_affinity' => :'Boolean',
        :'storage_type' => :'String',
        :'sys_type' => :'String',
        :'user_data' => :'String',
        :'user_tags' => :'Array<String>',
        :'volume_ids' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IbmCloudPower::SAPCreate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IbmCloudPower::SAPCreate`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'deployment_target')
        self.deployment_target = attributes[:'deployment_target']
      end

      if attributes.key?(:'deployment_type')
        self.deployment_type = attributes[:'deployment_type']
      end

      if attributes.key?(:'image_id')
        self.image_id = attributes[:'image_id']
      else
        self.image_id = nil
      end

      if attributes.key?(:'instances')
        self.instances = attributes[:'instances']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'networks')
        if (value = attributes[:'networks']).is_a?(Array)
          self.networks = value
        end
      else
        self.networks = nil
      end

      if attributes.key?(:'pin_policy')
        self.pin_policy = attributes[:'pin_policy']
      end

      if attributes.key?(:'placement_group')
        self.placement_group = attributes[:'placement_group']
      end

      if attributes.key?(:'profile_id')
        self.profile_id = attributes[:'profile_id']
      else
        self.profile_id = nil
      end

      if attributes.key?(:'ssh_key_name')
        self.ssh_key_name = attributes[:'ssh_key_name']
      end

      if attributes.key?(:'storage_affinity')
        self.storage_affinity = attributes[:'storage_affinity']
      end

      if attributes.key?(:'storage_pool')
        self.storage_pool = attributes[:'storage_pool']
      end

      if attributes.key?(:'storage_pool_affinity')
        self.storage_pool_affinity = attributes[:'storage_pool_affinity']
      else
        self.storage_pool_affinity = true
      end

      if attributes.key?(:'storage_type')
        self.storage_type = attributes[:'storage_type']
      end

      if attributes.key?(:'sys_type')
        self.sys_type = attributes[:'sys_type']
      end

      if attributes.key?(:'user_data')
        self.user_data = attributes[:'user_data']
      end

      if attributes.key?(:'user_tags')
        if (value = attributes[:'user_tags']).is_a?(Array)
          self.user_tags = value
        end
      end

      if attributes.key?(:'volume_ids')
        if (value = attributes[:'volume_ids']).is_a?(Array)
          self.volume_ids = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @image_id.nil?
        invalid_properties.push('invalid value for "image_id", image_id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @networks.nil?
        invalid_properties.push('invalid value for "networks", networks cannot be nil.')
      end

      if @profile_id.nil?
        invalid_properties.push('invalid value for "profile_id", profile_id cannot be nil.')
      end

      pattern = Regexp.new(/^[\s]*[A-Za-z][A-Za-z0-9\-]{3,}$/)
      if @profile_id !~ pattern
        invalid_properties.push("invalid value for \"profile_id\", must conform to the pattern #{pattern}.")
      end

      if !@user_tags.nil? && @user_tags.length > 100
        invalid_properties.push('invalid value for "user_tags", number of items must be less than or equal to 100.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @image_id.nil?
      return false if @name.nil?
      return false if @networks.nil?
      return false if @profile_id.nil?
      return false if @profile_id !~ Regexp.new(/^[\s]*[A-Za-z][A-Za-z0-9\-]{3,}$/)
      return false if !@user_tags.nil? && @user_tags.length > 100
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] image_id Value to be assigned
    def image_id=(image_id)
      if image_id.nil?
        fail ArgumentError, 'image_id cannot be nil'
      end

      @image_id = image_id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] networks Value to be assigned
    def networks=(networks)
      if networks.nil?
        fail ArgumentError, 'networks cannot be nil'
      end

      @networks = networks
    end

    # Custom attribute writer method with validation
    # @param [Object] profile_id Value to be assigned
    def profile_id=(profile_id)
      if profile_id.nil?
        fail ArgumentError, 'profile_id cannot be nil'
      end

      pattern = Regexp.new(/^[\s]*[A-Za-z][A-Za-z0-9\-]{3,}$/)
      if profile_id !~ pattern
        fail ArgumentError, "invalid value for \"profile_id\", must conform to the pattern #{pattern}."
      end

      @profile_id = profile_id
    end

    # Custom attribute writer method with validation
    # @param [Object] user_tags Value to be assigned
    def user_tags=(user_tags)
      if user_tags.nil?
        fail ArgumentError, 'user_tags cannot be nil'
      end

      if user_tags.length > 100
        fail ArgumentError, 'invalid value for "user_tags", number of items must be less than or equal to 100.'
      end

      @user_tags = user_tags
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          deployment_target == o.deployment_target &&
          deployment_type == o.deployment_type &&
          image_id == o.image_id &&
          instances == o.instances &&
          name == o.name &&
          networks == o.networks &&
          pin_policy == o.pin_policy &&
          placement_group == o.placement_group &&
          profile_id == o.profile_id &&
          ssh_key_name == o.ssh_key_name &&
          storage_affinity == o.storage_affinity &&
          storage_pool == o.storage_pool &&
          storage_pool_affinity == o.storage_pool_affinity &&
          storage_type == o.storage_type &&
          sys_type == o.sys_type &&
          user_data == o.user_data &&
          user_tags == o.user_tags &&
          volume_ids == o.volume_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [deployment_target, deployment_type, image_id, instances, name, networks, pin_policy, placement_group, profile_id, ssh_key_name, storage_affinity, storage_pool, storage_pool_affinity, storage_type, sys_type, user_data, user_tags, volume_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IbmCloudPower.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
