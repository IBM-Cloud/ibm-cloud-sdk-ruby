=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module IbmCloudPower
  class Image
    # Creation Date
    attr_accessor :creation_date

    # The CRN for this resource
    attr_accessor :crn

    # Description
    attr_accessor :description

    # Image ID
    attr_accessor :image_id

    # Last Update Date
    attr_accessor :last_update_date

    # Maximum image volume size for multi-volume image
    attr_accessor :max_image_volume_size

    # Image Name
    attr_accessor :name

    # List of Servers that have deployed the image
    attr_accessor :servers

    # Image Size
    attr_accessor :size

    attr_accessor :specifications

    # Image State
    attr_accessor :state

    # Storage pool where the image resides
    attr_accessor :storage_pool

    # Storage type for image
    attr_accessor :storage_type

    attr_accessor :taskref

    # List of user tags
    attr_accessor :user_tags

    # Image Volumes
    attr_accessor :volumes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'creation_date' => :'creationDate',
        :'crn' => :'crn',
        :'description' => :'description',
        :'image_id' => :'imageID',
        :'last_update_date' => :'lastUpdateDate',
        :'max_image_volume_size' => :'maxImageVolumeSize',
        :'name' => :'name',
        :'servers' => :'servers',
        :'size' => :'size',
        :'specifications' => :'specifications',
        :'state' => :'state',
        :'storage_pool' => :'storagePool',
        :'storage_type' => :'storageType',
        :'taskref' => :'taskref',
        :'user_tags' => :'userTags',
        :'volumes' => :'volumes'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'creation_date' => :'Time',
        :'crn' => :'String',
        :'description' => :'String',
        :'image_id' => :'String',
        :'last_update_date' => :'Time',
        :'max_image_volume_size' => :'Float',
        :'name' => :'String',
        :'servers' => :'Array<String>',
        :'size' => :'Float',
        :'specifications' => :'ImageSpecifications',
        :'state' => :'String',
        :'storage_pool' => :'String',
        :'storage_type' => :'String',
        :'taskref' => :'ImageTaskref',
        :'user_tags' => :'Array<String>',
        :'volumes' => :'Array<ImageVolume>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IbmCloudPower::Image` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IbmCloudPower::Image`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'creation_date')
        self.creation_date = attributes[:'creation_date']
      else
        self.creation_date = nil
      end

      if attributes.key?(:'crn')
        self.crn = attributes[:'crn']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'image_id')
        self.image_id = attributes[:'image_id']
      else
        self.image_id = nil
      end

      if attributes.key?(:'last_update_date')
        self.last_update_date = attributes[:'last_update_date']
      else
        self.last_update_date = nil
      end

      if attributes.key?(:'max_image_volume_size')
        self.max_image_volume_size = attributes[:'max_image_volume_size']
      else
        self.max_image_volume_size = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'servers')
        if (value = attributes[:'servers']).is_a?(Array)
          self.servers = value
        end
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      else
        self.size = nil
      end

      if attributes.key?(:'specifications')
        self.specifications = attributes[:'specifications']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'storage_pool')
        self.storage_pool = attributes[:'storage_pool']
      else
        self.storage_pool = nil
      end

      if attributes.key?(:'storage_type')
        self.storage_type = attributes[:'storage_type']
      else
        self.storage_type = nil
      end

      if attributes.key?(:'taskref')
        self.taskref = attributes[:'taskref']
      end

      if attributes.key?(:'user_tags')
        if (value = attributes[:'user_tags']).is_a?(Array)
          self.user_tags = value
        end
      end

      if attributes.key?(:'volumes')
        if (value = attributes[:'volumes']).is_a?(Array)
          self.volumes = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @creation_date.nil?
        invalid_properties.push('invalid value for "creation_date", creation_date cannot be nil.')
      end

      if @image_id.nil?
        invalid_properties.push('invalid value for "image_id", image_id cannot be nil.')
      end

      if @last_update_date.nil?
        invalid_properties.push('invalid value for "last_update_date", last_update_date cannot be nil.')
      end

      if @max_image_volume_size.nil?
        invalid_properties.push('invalid value for "max_image_volume_size", max_image_volume_size cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @size.nil?
        invalid_properties.push('invalid value for "size", size cannot be nil.')
      end

      if @storage_pool.nil?
        invalid_properties.push('invalid value for "storage_pool", storage_pool cannot be nil.')
      end

      if @storage_type.nil?
        invalid_properties.push('invalid value for "storage_type", storage_type cannot be nil.')
      end

      if !@user_tags.nil? && @user_tags.length > 100
        invalid_properties.push('invalid value for "user_tags", number of items must be less than or equal to 100.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @creation_date.nil?
      return false if @image_id.nil?
      return false if @last_update_date.nil?
      return false if @max_image_volume_size.nil?
      return false if @name.nil?
      return false if @size.nil?
      return false if @storage_pool.nil?
      return false if @storage_type.nil?
      return false if !@user_tags.nil? && @user_tags.length > 100
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] creation_date Value to be assigned
    def creation_date=(creation_date)
      if creation_date.nil?
        fail ArgumentError, 'creation_date cannot be nil'
      end

      @creation_date = creation_date
    end

    # Custom attribute writer method with validation
    # @param [Object] image_id Value to be assigned
    def image_id=(image_id)
      if image_id.nil?
        fail ArgumentError, 'image_id cannot be nil'
      end

      @image_id = image_id
    end

    # Custom attribute writer method with validation
    # @param [Object] last_update_date Value to be assigned
    def last_update_date=(last_update_date)
      if last_update_date.nil?
        fail ArgumentError, 'last_update_date cannot be nil'
      end

      @last_update_date = last_update_date
    end

    # Custom attribute writer method with validation
    # @param [Object] max_image_volume_size Value to be assigned
    def max_image_volume_size=(max_image_volume_size)
      if max_image_volume_size.nil?
        fail ArgumentError, 'max_image_volume_size cannot be nil'
      end

      @max_image_volume_size = max_image_volume_size
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] size Value to be assigned
    def size=(size)
      if size.nil?
        fail ArgumentError, 'size cannot be nil'
      end

      @size = size
    end

    # Custom attribute writer method with validation
    # @param [Object] storage_pool Value to be assigned
    def storage_pool=(storage_pool)
      if storage_pool.nil?
        fail ArgumentError, 'storage_pool cannot be nil'
      end

      @storage_pool = storage_pool
    end

    # Custom attribute writer method with validation
    # @param [Object] storage_type Value to be assigned
    def storage_type=(storage_type)
      if storage_type.nil?
        fail ArgumentError, 'storage_type cannot be nil'
      end

      @storage_type = storage_type
    end

    # Custom attribute writer method with validation
    # @param [Object] user_tags Value to be assigned
    def user_tags=(user_tags)
      if user_tags.nil?
        fail ArgumentError, 'user_tags cannot be nil'
      end

      if user_tags.length > 100
        fail ArgumentError, 'invalid value for "user_tags", number of items must be less than or equal to 100.'
      end

      @user_tags = user_tags
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          creation_date == o.creation_date &&
          crn == o.crn &&
          description == o.description &&
          image_id == o.image_id &&
          last_update_date == o.last_update_date &&
          max_image_volume_size == o.max_image_volume_size &&
          name == o.name &&
          servers == o.servers &&
          size == o.size &&
          specifications == o.specifications &&
          state == o.state &&
          storage_pool == o.storage_pool &&
          storage_type == o.storage_type &&
          taskref == o.taskref &&
          user_tags == o.user_tags &&
          volumes == o.volumes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [creation_date, crn, description, image_id, last_update_date, max_image_volume_size, name, servers, size, specifications, state, storage_pool, storage_type, taskref, user_tags, volumes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IbmCloudPower.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
