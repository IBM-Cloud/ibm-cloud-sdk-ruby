=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module IbmCloudPower
  class RemoteCopyRelationship
    # Name of the volume that is acting as the auxiliary change volume for the relationship
    attr_accessor :aux_changed_volume_name

    # Auxiliary volume name at storage host level
    attr_accessor :aux_volume_name

    # Consistency Group Name if volume is a part of volume group
    attr_accessor :consistency_group_name

    # Indicates the copy type.
    attr_accessor :copy_type

    # Indicates the type of cycling mode used.
    attr_accessor :cycling_mode

    # Freeze time of remote copy relationship
    attr_accessor :freeze_time

    # Name of the volume that is acting as the master change volume for the relationship
    attr_accessor :master_changed_volume_name

    # Master volume name at storage host level
    attr_accessor :master_volume_name

    # Remote copy relationship name
    attr_accessor :name

    # Indicates whether master/aux volume is playing the primary role
    attr_accessor :primary_role

    # Indicates the relationship progress
    attr_accessor :progress

    # Remote copy relationship ID
    attr_accessor :remote_copy_id

    # Indicates the relationship state
    attr_accessor :state

    # Indicates whether the relationship is synchronized
    attr_accessor :sync

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'aux_changed_volume_name' => :'auxChangedVolumeName',
        :'aux_volume_name' => :'auxVolumeName',
        :'consistency_group_name' => :'consistencyGroupName',
        :'copy_type' => :'copyType',
        :'cycling_mode' => :'cyclingMode',
        :'freeze_time' => :'freezeTime',
        :'master_changed_volume_name' => :'masterChangedVolumeName',
        :'master_volume_name' => :'masterVolumeName',
        :'name' => :'name',
        :'primary_role' => :'primaryRole',
        :'progress' => :'progress',
        :'remote_copy_id' => :'remoteCopyID',
        :'state' => :'state',
        :'sync' => :'sync'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'aux_changed_volume_name' => :'String',
        :'aux_volume_name' => :'String',
        :'consistency_group_name' => :'String',
        :'copy_type' => :'String',
        :'cycling_mode' => :'String',
        :'freeze_time' => :'Time',
        :'master_changed_volume_name' => :'String',
        :'master_volume_name' => :'String',
        :'name' => :'String',
        :'primary_role' => :'String',
        :'progress' => :'Integer',
        :'remote_copy_id' => :'String',
        :'state' => :'String',
        :'sync' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IbmCloudPower::RemoteCopyRelationship` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IbmCloudPower::RemoteCopyRelationship`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'aux_changed_volume_name')
        self.aux_changed_volume_name = attributes[:'aux_changed_volume_name']
      end

      if attributes.key?(:'aux_volume_name')
        self.aux_volume_name = attributes[:'aux_volume_name']
      end

      if attributes.key?(:'consistency_group_name')
        self.consistency_group_name = attributes[:'consistency_group_name']
      end

      if attributes.key?(:'copy_type')
        self.copy_type = attributes[:'copy_type']
      end

      if attributes.key?(:'cycling_mode')
        self.cycling_mode = attributes[:'cycling_mode']
      end

      if attributes.key?(:'freeze_time')
        self.freeze_time = attributes[:'freeze_time']
      end

      if attributes.key?(:'master_changed_volume_name')
        self.master_changed_volume_name = attributes[:'master_changed_volume_name']
      end

      if attributes.key?(:'master_volume_name')
        self.master_volume_name = attributes[:'master_volume_name']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'primary_role')
        self.primary_role = attributes[:'primary_role']
      end

      if attributes.key?(:'progress')
        self.progress = attributes[:'progress']
      end

      if attributes.key?(:'remote_copy_id')
        self.remote_copy_id = attributes[:'remote_copy_id']
      else
        self.remote_copy_id = nil
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'sync')
        self.sync = attributes[:'sync']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @remote_copy_id.nil?
        invalid_properties.push('invalid value for "remote_copy_id", remote_copy_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @name.nil?
      return false if @remote_copy_id.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] remote_copy_id Value to be assigned
    def remote_copy_id=(remote_copy_id)
      if remote_copy_id.nil?
        fail ArgumentError, 'remote_copy_id cannot be nil'
      end

      @remote_copy_id = remote_copy_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          aux_changed_volume_name == o.aux_changed_volume_name &&
          aux_volume_name == o.aux_volume_name &&
          consistency_group_name == o.consistency_group_name &&
          copy_type == o.copy_type &&
          cycling_mode == o.cycling_mode &&
          freeze_time == o.freeze_time &&
          master_changed_volume_name == o.master_changed_volume_name &&
          master_volume_name == o.master_volume_name &&
          name == o.name &&
          primary_role == o.primary_role &&
          progress == o.progress &&
          remote_copy_id == o.remote_copy_id &&
          state == o.state &&
          sync == o.sync
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [aux_changed_volume_name, aux_volume_name, consistency_group_name, copy_type, cycling_mode, freeze_time, master_changed_volume_name, master_volume_name, name, primary_role, progress, remote_copy_id, state, sync].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IbmCloudPower.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
