=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module IbmCloudPower
  class CreateCosImageImportJob
    # Cloud Object Storage access key; required for buckets with private access
    attr_accessor :access_key

    # indicates if the bucket has public or private access public access require no authentication keys private access requires hmac authentication keys (access,secret)
    attr_accessor :bucket_access

    # Cloud Object Storage bucket name; bucket-name[/optional/folder]
    attr_accessor :bucket_name

    # Cloud Object Storage image filename
    attr_accessor :image_filename

    # Name for the image that will be loaded into the boot image catalog
    attr_accessor :image_name

    attr_accessor :import_details

    # Image OS Type, required if importing a raw image; raw images can only be imported using the command line interface
    attr_accessor :os_type

    # Cloud Object Storage region
    attr_accessor :region

    # Cloud Object Storage secret key; required for buckets with private access
    attr_accessor :secret_key

    attr_accessor :storage_affinity

    # Storage pool where the image will be loaded, if provided then storageAffinity will be ignored
    attr_accessor :storage_pool

    # Type of storage; If only using storageType for storage selection then the storage pool with the most available space will be selected if storageType is not provided the storage type will default to 'tier3'.
    attr_accessor :storage_type

    # List of user tags
    attr_accessor :user_tags

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'access_key' => :'accessKey',
        :'bucket_access' => :'bucketAccess',
        :'bucket_name' => :'bucketName',
        :'image_filename' => :'imageFilename',
        :'image_name' => :'imageName',
        :'import_details' => :'importDetails',
        :'os_type' => :'osType',
        :'region' => :'region',
        :'secret_key' => :'secretKey',
        :'storage_affinity' => :'storageAffinity',
        :'storage_pool' => :'storagePool',
        :'storage_type' => :'storageType',
        :'user_tags' => :'userTags'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'access_key' => :'String',
        :'bucket_access' => :'String',
        :'bucket_name' => :'String',
        :'image_filename' => :'String',
        :'image_name' => :'String',
        :'import_details' => :'ImageImportDetails',
        :'os_type' => :'String',
        :'region' => :'String',
        :'secret_key' => :'String',
        :'storage_affinity' => :'StorageAffinity',
        :'storage_pool' => :'String',
        :'storage_type' => :'String',
        :'user_tags' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IbmCloudPower::CreateCosImageImportJob` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IbmCloudPower::CreateCosImageImportJob`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'access_key')
        self.access_key = attributes[:'access_key']
      end

      if attributes.key?(:'bucket_access')
        self.bucket_access = attributes[:'bucket_access']
      else
        self.bucket_access = 'private'
      end

      if attributes.key?(:'bucket_name')
        self.bucket_name = attributes[:'bucket_name']
      else
        self.bucket_name = nil
      end

      if attributes.key?(:'image_filename')
        self.image_filename = attributes[:'image_filename']
      else
        self.image_filename = nil
      end

      if attributes.key?(:'image_name')
        self.image_name = attributes[:'image_name']
      else
        self.image_name = nil
      end

      if attributes.key?(:'import_details')
        self.import_details = attributes[:'import_details']
      end

      if attributes.key?(:'os_type')
        self.os_type = attributes[:'os_type']
      end

      if attributes.key?(:'region')
        self.region = attributes[:'region']
      else
        self.region = nil
      end

      if attributes.key?(:'secret_key')
        self.secret_key = attributes[:'secret_key']
      end

      if attributes.key?(:'storage_affinity')
        self.storage_affinity = attributes[:'storage_affinity']
      end

      if attributes.key?(:'storage_pool')
        self.storage_pool = attributes[:'storage_pool']
      end

      if attributes.key?(:'storage_type')
        self.storage_type = attributes[:'storage_type']
      end

      if attributes.key?(:'user_tags')
        if (value = attributes[:'user_tags']).is_a?(Array)
          self.user_tags = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @bucket_name.nil?
        invalid_properties.push('invalid value for "bucket_name", bucket_name cannot be nil.')
      end

      if @image_filename.nil?
        invalid_properties.push('invalid value for "image_filename", image_filename cannot be nil.')
      end

      if @image_name.nil?
        invalid_properties.push('invalid value for "image_name", image_name cannot be nil.')
      end

      if @region.nil?
        invalid_properties.push('invalid value for "region", region cannot be nil.')
      end

      if !@user_tags.nil? && @user_tags.length > 100
        invalid_properties.push('invalid value for "user_tags", number of items must be less than or equal to 100.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      bucket_access_validator = EnumAttributeValidator.new('String', ["public", "private"])
      return false unless bucket_access_validator.valid?(@bucket_access)
      return false if @bucket_name.nil?
      return false if @image_filename.nil?
      return false if @image_name.nil?
      os_type_validator = EnumAttributeValidator.new('String', ["aix", "ibmi", "rhel", "sles"])
      return false unless os_type_validator.valid?(@os_type)
      return false if @region.nil?
      return false if !@user_tags.nil? && @user_tags.length > 100
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bucket_access Object to be assigned
    def bucket_access=(bucket_access)
      validator = EnumAttributeValidator.new('String', ["public", "private"])
      unless validator.valid?(bucket_access)
        fail ArgumentError, "invalid value for \"bucket_access\", must be one of #{validator.allowable_values}."
      end
      @bucket_access = bucket_access
    end

    # Custom attribute writer method with validation
    # @param [Object] bucket_name Value to be assigned
    def bucket_name=(bucket_name)
      if bucket_name.nil?
        fail ArgumentError, 'bucket_name cannot be nil'
      end

      @bucket_name = bucket_name
    end

    # Custom attribute writer method with validation
    # @param [Object] image_filename Value to be assigned
    def image_filename=(image_filename)
      if image_filename.nil?
        fail ArgumentError, 'image_filename cannot be nil'
      end

      @image_filename = image_filename
    end

    # Custom attribute writer method with validation
    # @param [Object] image_name Value to be assigned
    def image_name=(image_name)
      if image_name.nil?
        fail ArgumentError, 'image_name cannot be nil'
      end

      @image_name = image_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] os_type Object to be assigned
    def os_type=(os_type)
      validator = EnumAttributeValidator.new('String', ["aix", "ibmi", "rhel", "sles"])
      unless validator.valid?(os_type)
        fail ArgumentError, "invalid value for \"os_type\", must be one of #{validator.allowable_values}."
      end
      @os_type = os_type
    end

    # Custom attribute writer method with validation
    # @param [Object] region Value to be assigned
    def region=(region)
      if region.nil?
        fail ArgumentError, 'region cannot be nil'
      end

      @region = region
    end

    # Custom attribute writer method with validation
    # @param [Object] user_tags Value to be assigned
    def user_tags=(user_tags)
      if user_tags.nil?
        fail ArgumentError, 'user_tags cannot be nil'
      end

      if user_tags.length > 100
        fail ArgumentError, 'invalid value for "user_tags", number of items must be less than or equal to 100.'
      end

      @user_tags = user_tags
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          access_key == o.access_key &&
          bucket_access == o.bucket_access &&
          bucket_name == o.bucket_name &&
          image_filename == o.image_filename &&
          image_name == o.image_name &&
          import_details == o.import_details &&
          os_type == o.os_type &&
          region == o.region &&
          secret_key == o.secret_key &&
          storage_affinity == o.storage_affinity &&
          storage_pool == o.storage_pool &&
          storage_type == o.storage_type &&
          user_tags == o.user_tags
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [access_key, bucket_access, bucket_name, image_filename, image_name, import_details, os_type, region, secret_key, storage_affinity, storage_pool, storage_type, user_tags].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IbmCloudPower.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
