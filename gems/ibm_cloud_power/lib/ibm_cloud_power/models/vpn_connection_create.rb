=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module IbmCloudPower
  class VPNConnectionCreate
    # unique identifier of IKEPolicy selected for this VPNConnection
    attr_accessor :ike_policy

    # unique identifier of IPSecPolicy selected for this VPNConnection
    attr_accessor :ip_sec_policy

    # Mode used by this VPNConnection, either policy-based, or route-based, this attribute is set at the creation and cannot be updated later.
    attr_accessor :mode

    # VPN Connection name
    attr_accessor :name

    # an array of network IDs to attach to this VPNConnection
    attr_accessor :networks

    # IP address of the Peer Gateway attached to this VPNConnection
    attr_accessor :peer_gateway_address

    # an array of strings containing CIDR of peer subnets
    attr_accessor :peer_subnets

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ike_policy' => :'ikePolicy',
        :'ip_sec_policy' => :'ipSecPolicy',
        :'mode' => :'mode',
        :'name' => :'name',
        :'networks' => :'networks',
        :'peer_gateway_address' => :'peerGatewayAddress',
        :'peer_subnets' => :'peerSubnets'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ike_policy' => :'String',
        :'ip_sec_policy' => :'String',
        :'mode' => :'String',
        :'name' => :'String',
        :'networks' => :'Array<String>',
        :'peer_gateway_address' => :'String',
        :'peer_subnets' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IbmCloudPower::VPNConnectionCreate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IbmCloudPower::VPNConnectionCreate`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ike_policy')
        self.ike_policy = attributes[:'ike_policy']
      else
        self.ike_policy = nil
      end

      if attributes.key?(:'ip_sec_policy')
        self.ip_sec_policy = attributes[:'ip_sec_policy']
      else
        self.ip_sec_policy = nil
      end

      if attributes.key?(:'mode')
        self.mode = attributes[:'mode']
      else
        self.mode = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'networks')
        if (value = attributes[:'networks']).is_a?(Array)
          self.networks = value
        end
      else
        self.networks = nil
      end

      if attributes.key?(:'peer_gateway_address')
        self.peer_gateway_address = attributes[:'peer_gateway_address']
      else
        self.peer_gateway_address = nil
      end

      if attributes.key?(:'peer_subnets')
        if (value = attributes[:'peer_subnets']).is_a?(Array)
          self.peer_subnets = value
        end
      else
        self.peer_subnets = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @ike_policy.nil?
        invalid_properties.push('invalid value for "ike_policy", ike_policy cannot be nil.')
      end

      if @ip_sec_policy.nil?
        invalid_properties.push('invalid value for "ip_sec_policy", ip_sec_policy cannot be nil.')
      end

      if @mode.nil?
        invalid_properties.push('invalid value for "mode", mode cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @networks.nil?
        invalid_properties.push('invalid value for "networks", networks cannot be nil.')
      end

      if @peer_gateway_address.nil?
        invalid_properties.push('invalid value for "peer_gateway_address", peer_gateway_address cannot be nil.')
      end

      if @peer_subnets.nil?
        invalid_properties.push('invalid value for "peer_subnets", peer_subnets cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @ike_policy.nil?
      return false if @ip_sec_policy.nil?
      return false if @mode.nil?
      mode_validator = EnumAttributeValidator.new('String', ["policy", "route"])
      return false unless mode_validator.valid?(@mode)
      return false if @name.nil?
      return false if @networks.nil?
      return false if @peer_gateway_address.nil?
      return false if @peer_subnets.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] ike_policy Value to be assigned
    def ike_policy=(ike_policy)
      if ike_policy.nil?
        fail ArgumentError, 'ike_policy cannot be nil'
      end

      @ike_policy = ike_policy
    end

    # Custom attribute writer method with validation
    # @param [Object] ip_sec_policy Value to be assigned
    def ip_sec_policy=(ip_sec_policy)
      if ip_sec_policy.nil?
        fail ArgumentError, 'ip_sec_policy cannot be nil'
      end

      @ip_sec_policy = ip_sec_policy
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mode Object to be assigned
    def mode=(mode)
      validator = EnumAttributeValidator.new('String', ["policy", "route"])
      unless validator.valid?(mode)
        fail ArgumentError, "invalid value for \"mode\", must be one of #{validator.allowable_values}."
      end
      @mode = mode
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] networks Value to be assigned
    def networks=(networks)
      if networks.nil?
        fail ArgumentError, 'networks cannot be nil'
      end

      @networks = networks
    end

    # Custom attribute writer method with validation
    # @param [Object] peer_gateway_address Value to be assigned
    def peer_gateway_address=(peer_gateway_address)
      if peer_gateway_address.nil?
        fail ArgumentError, 'peer_gateway_address cannot be nil'
      end

      @peer_gateway_address = peer_gateway_address
    end

    # Custom attribute writer method with validation
    # @param [Object] peer_subnets Value to be assigned
    def peer_subnets=(peer_subnets)
      if peer_subnets.nil?
        fail ArgumentError, 'peer_subnets cannot be nil'
      end

      @peer_subnets = peer_subnets
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ike_policy == o.ike_policy &&
          ip_sec_policy == o.ip_sec_policy &&
          mode == o.mode &&
          name == o.name &&
          networks == o.networks &&
          peer_gateway_address == o.peer_gateway_address &&
          peer_subnets == o.peer_subnets
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ike_policy, ip_sec_policy, mode, name, networks, peer_gateway_address, peer_subnets].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IbmCloudPower.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
