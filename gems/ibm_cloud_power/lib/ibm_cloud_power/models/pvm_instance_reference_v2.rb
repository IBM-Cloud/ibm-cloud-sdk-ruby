=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module IbmCloudPower
  class PVMInstanceReferenceV2
    attr_accessor :configuration

    attr_accessor :cores

    # Date/Time of PVM creation
    attr_accessor :creation_date

    # The CRN for this resource
    attr_accessor :crn

    attr_accessor :deployment

    attr_accessor :health

    attr_accessor :host

    # Link to Cloud Instance resource
    attr_accessor :href

    # PCloud PVM Instance ID
    attr_accessor :id

    attr_accessor :memory

    # Name of the server
    attr_accessor :name

    # The pvm instance network ports information
    attr_accessor :network_ports

    attr_accessor :operating_system

    attr_accessor :placement_group

    # The status of the instance
    attr_accessor :status

    attr_accessor :virtual_cores

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'configuration' => :'configuration',
        :'cores' => :'cores',
        :'creation_date' => :'creationDate',
        :'crn' => :'crn',
        :'deployment' => :'deployment',
        :'health' => :'health',
        :'host' => :'host',
        :'href' => :'href',
        :'id' => :'id',
        :'memory' => :'memory',
        :'name' => :'name',
        :'network_ports' => :'networkPorts',
        :'operating_system' => :'operatingSystem',
        :'placement_group' => :'placementGroup',
        :'status' => :'status',
        :'virtual_cores' => :'virtualCores'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'configuration' => :'PVMInstanceConfiguration',
        :'cores' => :'PVMInstanceCores',
        :'creation_date' => :'Time',
        :'crn' => :'String',
        :'deployment' => :'PvmInstanceDeployment',
        :'health' => :'PVMInstanceV2Health',
        :'host' => :'PvmInstanceHost',
        :'href' => :'String',
        :'id' => :'String',
        :'memory' => :'PVMInstanceMemory',
        :'name' => :'String',
        :'network_ports' => :'Array<PVMInstanceV2NetworkPort>',
        :'operating_system' => :'PVMInstanceOperatingSystem',
        :'placement_group' => :'PvmInstancePlacementGroup',
        :'status' => :'String',
        :'virtual_cores' => :'PVMInstanceVirtualCores'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IbmCloudPower::PVMInstanceReferenceV2` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IbmCloudPower::PVMInstanceReferenceV2`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'configuration')
        self.configuration = attributes[:'configuration']
      end

      if attributes.key?(:'cores')
        self.cores = attributes[:'cores']
      else
        self.cores = nil
      end

      if attributes.key?(:'creation_date')
        self.creation_date = attributes[:'creation_date']
      end

      if attributes.key?(:'crn')
        self.crn = attributes[:'crn']
      end

      if attributes.key?(:'deployment')
        self.deployment = attributes[:'deployment']
      else
        self.deployment = nil
      end

      if attributes.key?(:'health')
        self.health = attributes[:'health']
      end

      if attributes.key?(:'host')
        self.host = attributes[:'host']
      end

      if attributes.key?(:'href')
        self.href = attributes[:'href']
      else
        self.href = nil
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'memory')
        self.memory = attributes[:'memory']
      else
        self.memory = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'network_ports')
        if (value = attributes[:'network_ports']).is_a?(Array)
          self.network_ports = value
        end
      else
        self.network_ports = nil
      end

      if attributes.key?(:'operating_system')
        self.operating_system = attributes[:'operating_system']
      else
        self.operating_system = nil
      end

      if attributes.key?(:'placement_group')
        self.placement_group = attributes[:'placement_group']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'virtual_cores')
        self.virtual_cores = attributes[:'virtual_cores']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @cores.nil?
        invalid_properties.push('invalid value for "cores", cores cannot be nil.')
      end

      if @deployment.nil?
        invalid_properties.push('invalid value for "deployment", deployment cannot be nil.')
      end

      if @href.nil?
        invalid_properties.push('invalid value for "href", href cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @memory.nil?
        invalid_properties.push('invalid value for "memory", memory cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @network_ports.nil?
        invalid_properties.push('invalid value for "network_ports", network_ports cannot be nil.')
      end

      if @operating_system.nil?
        invalid_properties.push('invalid value for "operating_system", operating_system cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @cores.nil?
      return false if @deployment.nil?
      return false if @href.nil?
      return false if @id.nil?
      return false if @memory.nil?
      return false if @name.nil?
      return false if @network_ports.nil?
      return false if @operating_system.nil?
      return false if @status.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] cores Value to be assigned
    def cores=(cores)
      if cores.nil?
        fail ArgumentError, 'cores cannot be nil'
      end

      @cores = cores
    end

    # Custom attribute writer method with validation
    # @param [Object] deployment Value to be assigned
    def deployment=(deployment)
      if deployment.nil?
        fail ArgumentError, 'deployment cannot be nil'
      end

      @deployment = deployment
    end

    # Custom attribute writer method with validation
    # @param [Object] href Value to be assigned
    def href=(href)
      if href.nil?
        fail ArgumentError, 'href cannot be nil'
      end

      @href = href
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] memory Value to be assigned
    def memory=(memory)
      if memory.nil?
        fail ArgumentError, 'memory cannot be nil'
      end

      @memory = memory
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] network_ports Value to be assigned
    def network_ports=(network_ports)
      if network_ports.nil?
        fail ArgumentError, 'network_ports cannot be nil'
      end

      @network_ports = network_ports
    end

    # Custom attribute writer method with validation
    # @param [Object] operating_system Value to be assigned
    def operating_system=(operating_system)
      if operating_system.nil?
        fail ArgumentError, 'operating_system cannot be nil'
      end

      @operating_system = operating_system
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if status.nil?
        fail ArgumentError, 'status cannot be nil'
      end

      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          configuration == o.configuration &&
          cores == o.cores &&
          creation_date == o.creation_date &&
          crn == o.crn &&
          deployment == o.deployment &&
          health == o.health &&
          host == o.host &&
          href == o.href &&
          id == o.id &&
          memory == o.memory &&
          name == o.name &&
          network_ports == o.network_ports &&
          operating_system == o.operating_system &&
          placement_group == o.placement_group &&
          status == o.status &&
          virtual_cores == o.virtual_cores
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [configuration, cores, creation_date, crn, deployment, health, host, href, id, memory, name, network_ports, operating_system, placement_group, status, virtual_cores].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IbmCloudPower.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
