=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module IbmCloudPower
  class CloudInstanceUsageLimits
    # Maximum memory (in GB) per PVMInstance
    attr_accessor :instance_memory

    # Maximum proc units per PVMInstance
    attr_accessor :instance_proc_units

    # Number of power instances allowed
    attr_accessor :instances

    # Amount of memory allowed
    attr_accessor :memory

    # Maximum network bandwidth to GCP Mbps
    attr_accessor :peering_bandwidth

    # Amount of peering networks allowed
    attr_accessor :peering_networks

    # Number of processor units allowed
    attr_accessor :proc_units

    # Number of processors allowed
    attr_accessor :processors

    # Amount of storage allowed (TB)
    attr_accessor :storage

    # Amount of SSD storage allowed (TB)
    attr_accessor :storage_ssd

    # Amount of standard (HDD) storage allowed (TB)
    attr_accessor :storage_standard

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'instance_memory' => :'instanceMemory',
        :'instance_proc_units' => :'instanceProcUnits',
        :'instances' => :'instances',
        :'memory' => :'memory',
        :'peering_bandwidth' => :'peeringBandwidth',
        :'peering_networks' => :'peeringNetworks',
        :'proc_units' => :'procUnits',
        :'processors' => :'processors',
        :'storage' => :'storage',
        :'storage_ssd' => :'storageSSD',
        :'storage_standard' => :'storageStandard'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'instance_memory' => :'Float',
        :'instance_proc_units' => :'Float',
        :'instances' => :'Float',
        :'memory' => :'Float',
        :'peering_bandwidth' => :'Integer',
        :'peering_networks' => :'Integer',
        :'proc_units' => :'Float',
        :'processors' => :'Float',
        :'storage' => :'Float',
        :'storage_ssd' => :'Float',
        :'storage_standard' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IbmCloudPower::CloudInstanceUsageLimits` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IbmCloudPower::CloudInstanceUsageLimits`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'instance_memory')
        self.instance_memory = attributes[:'instance_memory']
      end

      if attributes.key?(:'instance_proc_units')
        self.instance_proc_units = attributes[:'instance_proc_units']
      end

      if attributes.key?(:'instances')
        self.instances = attributes[:'instances']
      else
        self.instances = nil
      end

      if attributes.key?(:'memory')
        self.memory = attributes[:'memory']
      else
        self.memory = nil
      end

      if attributes.key?(:'peering_bandwidth')
        self.peering_bandwidth = attributes[:'peering_bandwidth']
      end

      if attributes.key?(:'peering_networks')
        self.peering_networks = attributes[:'peering_networks']
      end

      if attributes.key?(:'proc_units')
        self.proc_units = attributes[:'proc_units']
      else
        self.proc_units = nil
      end

      if attributes.key?(:'processors')
        self.processors = attributes[:'processors']
      else
        self.processors = nil
      end

      if attributes.key?(:'storage')
        self.storage = attributes[:'storage']
      else
        self.storage = nil
      end

      if attributes.key?(:'storage_ssd')
        self.storage_ssd = attributes[:'storage_ssd']
      end

      if attributes.key?(:'storage_standard')
        self.storage_standard = attributes[:'storage_standard']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @instances.nil?
        invalid_properties.push('invalid value for "instances", instances cannot be nil.')
      end

      if @memory.nil?
        invalid_properties.push('invalid value for "memory", memory cannot be nil.')
      end

      if @proc_units.nil?
        invalid_properties.push('invalid value for "proc_units", proc_units cannot be nil.')
      end

      if @processors.nil?
        invalid_properties.push('invalid value for "processors", processors cannot be nil.')
      end

      if @storage.nil?
        invalid_properties.push('invalid value for "storage", storage cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @instances.nil?
      return false if @memory.nil?
      return false if @proc_units.nil?
      return false if @processors.nil?
      return false if @storage.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] instances Value to be assigned
    def instances=(instances)
      if instances.nil?
        fail ArgumentError, 'instances cannot be nil'
      end

      @instances = instances
    end

    # Custom attribute writer method with validation
    # @param [Object] memory Value to be assigned
    def memory=(memory)
      if memory.nil?
        fail ArgumentError, 'memory cannot be nil'
      end

      @memory = memory
    end

    # Custom attribute writer method with validation
    # @param [Object] proc_units Value to be assigned
    def proc_units=(proc_units)
      if proc_units.nil?
        fail ArgumentError, 'proc_units cannot be nil'
      end

      @proc_units = proc_units
    end

    # Custom attribute writer method with validation
    # @param [Object] processors Value to be assigned
    def processors=(processors)
      if processors.nil?
        fail ArgumentError, 'processors cannot be nil'
      end

      @processors = processors
    end

    # Custom attribute writer method with validation
    # @param [Object] storage Value to be assigned
    def storage=(storage)
      if storage.nil?
        fail ArgumentError, 'storage cannot be nil'
      end

      @storage = storage
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          instance_memory == o.instance_memory &&
          instance_proc_units == o.instance_proc_units &&
          instances == o.instances &&
          memory == o.memory &&
          peering_bandwidth == o.peering_bandwidth &&
          peering_networks == o.peering_networks &&
          proc_units == o.proc_units &&
          processors == o.processors &&
          storage == o.storage &&
          storage_ssd == o.storage_ssd &&
          storage_standard == o.storage_standard
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [instance_memory, instance_proc_units, instances, memory, peering_bandwidth, peering_networks, proc_units, processors, storage, storage_ssd, storage_standard].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IbmCloudPower.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
