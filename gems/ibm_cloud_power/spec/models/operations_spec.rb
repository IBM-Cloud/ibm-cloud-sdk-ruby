=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for IbmCloudPower::Operations
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe IbmCloudPower::Operations do
  let(:instance) { IbmCloudPower::Operations.new }

  describe 'test an instance of Operations' do
    it 'should create an instance of Operations' do
      # uncomment below to test the instance creation
      #expect(instance).to be_instance_of(IbmCloudPower::Operations)
    end
  end

  describe 'test attribute "boot_mode"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["a", "b", "c", "d"])
      # validator.allowable_values.each do |value|
      #   expect { instance.boot_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "operating_mode"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["normal", "manual"])
      # validator.allowable_values.each do |value|
      #   expect { instance.operating_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "task"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["dston", "retrydump", "consoleservice", "iopreset", "remotedstoff", "remotedston", "iopdump", "dumprestart"])
      # validator.allowable_values.each do |value|
      #   expect { instance.task = value }.not_to raise_error
      # end
    end
  end

end
