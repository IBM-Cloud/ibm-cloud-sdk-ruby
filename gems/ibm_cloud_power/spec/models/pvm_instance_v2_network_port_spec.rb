=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 2.3.1
Contact: ismirlia@us.ibm.com
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for IbmCloudPower::PVMInstanceV2NetworkPort
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe IbmCloudPower::PVMInstanceV2NetworkPort do
  let(:instance) { IbmCloudPower::PVMInstanceV2NetworkPort.new }

  describe 'test an instance of PVMInstanceV2NetworkPort' do
    it 'should create an instance of PVMInstanceV2NetworkPort' do
      # uncomment below to test the instance creation
      #expect(instance).to be_instance_of(IbmCloudPower::PVMInstanceV2NetworkPort)
    end
  end

  describe 'test attribute "id"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "ip_protocol"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["IPv4", "IPv6"])
      # validator.allowable_values.each do |value|
      #   expect { instance.ip_protocol = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "mac_address"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "private_ip"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "type"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["dhcp", "static"])
      # validator.allowable_values.each do |value|
      #   expect { instance.type = value }.not_to raise_error
      # end
    end
  end

end
