=begin
#COS Compatibility S3 API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: nicholas.lange@ibm.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-beta2

=end

require 'cgi'

module IbmCloudObjectStorage
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # This operation is useful to determine if a bucket exists and you have permission to access it.
    # @param bucket [String] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def check_a_buckets_headers(bucket, body, opts = {})
      check_a_buckets_headers_with_http_info(bucket, body, opts)
      nil
    end

    # This operation is useful to determine if a bucket exists and you have permission to access it.
    # @param bucket [String] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def check_a_buckets_headers_with_http_info(bucket, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.check_a_buckets_headers ...'
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling DefaultApi.check_a_buckets_headers"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.check_a_buckets_headers"
      end
      # resource path
      local_var_path = '/{Bucket}?'.sub('{' + 'Bucket' + '}', CGI.escape(bucket.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iam']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#check_a_buckets_headers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The HEAD operation retrieves metadata from an object without returning the object itself. This operation is useful if you're only interested in an object's metadata. To use HEAD, you must have READ access to the object.
    # @param bucket [String] 
    # @param key [String] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def check_an_objects_headers(bucket, key, body, opts = {})
      data, _status_code, _headers = check_an_objects_headers_with_http_info(bucket, key, body, opts)
      data
    end

    # The HEAD operation retrieves metadata from an object without returning the object itself. This operation is useful if you&#39;re only interested in an object&#39;s metadata. To use HEAD, you must have READ access to the object.
    # @param bucket [String] 
    # @param key [String] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def check_an_objects_headers_with_http_info(bucket, key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.check_an_objects_headers ...'
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling DefaultApi.check_an_objects_headers"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.check_an_objects_headers"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.check_an_objects_headers"
      end
      # resource path
      local_var_path = '/{Bucket}/{Key}'.sub('{' + 'Bucket' + '}', CGI.escape(bucket.to_s)).sub('{' + 'Key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['iam']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#check_an_objects_headers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new bucket.
    # @param bucket [String] 
    # @param create_bucket_request [CreateBucketRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def create_a_bucket(bucket, create_bucket_request, opts = {})
      data, _status_code, _headers = create_a_bucket_with_http_info(bucket, create_bucket_request, opts)
      data
    end

    # Creates a new bucket.
    # @param bucket [String] 
    # @param create_bucket_request [CreateBucketRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def create_a_bucket_with_http_info(bucket, create_bucket_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_a_bucket ...'
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling DefaultApi.create_a_bucket"
      end
      # verify the required parameter 'create_bucket_request' is set
      if @api_client.config.client_side_validation && create_bucket_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_bucket_request' when calling DefaultApi.create_a_bucket"
      end
      # resource path
      local_var_path = '/{Bucket}?'.sub('{' + 'Bucket' + '}', CGI.escape(bucket.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_bucket_request) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['iam']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_a_bucket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the bucket. All objects in the bucket must be deleted before the bucket itself can be deleted.
    # @param bucket [String] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_a_bucket_(bucket, body, opts = {})
      delete_a_bucket__with_http_info(bucket, body, opts)
      nil
    end

    # Deletes the bucket. All objects in the bucket must be deleted before the bucket itself can be deleted.
    # @param bucket [String] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_a_bucket__with_http_info(bucket, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_a_bucket_ ...'
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling DefaultApi.delete_a_bucket_"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.delete_a_bucket_"
      end
      # resource path
      local_var_path = '/{Bucket}?'.sub('{' + 'Bucket' + '}', CGI.escape(bucket.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['iam']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_a_bucket_\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes an object from a bucket.
    # @param bucket [String] 
    # @param key [String] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_an_object(bucket, key, body, opts = {})
      data, _status_code, _headers = delete_an_object_with_http_info(bucket, key, body, opts)
      data
    end

    # Deletes an object from a bucket.
    # @param bucket [String] 
    # @param key [String] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_an_object_with_http_info(bucket, key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_an_object ...'
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling DefaultApi.delete_an_object"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.delete_an_object"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.delete_an_object"
      end
      # resource path
      local_var_path = '/{Bucket}/{Key}'.sub('{' + 'Bucket' + '}', CGI.escape(bucket.to_s)).sub('{' + 'Key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['iam']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_an_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves objects.
    # @param bucket [String] 
    # @param key [String] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [GetObjectOutput]
    def download_an_object(bucket, key, body, opts = {})
      data, _status_code, _headers = download_an_object_with_http_info(bucket, key, body, opts)
      data
    end

    # Retrieves objects.
    # @param bucket [String] 
    # @param key [String] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetObjectOutput, Integer, Hash)>] GetObjectOutput data, response status code and response headers
    def download_an_object_with_http_info(bucket, key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.download_an_object ...'
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling DefaultApi.download_an_object"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.download_an_object"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.download_an_object"
      end
      # resource path
      local_var_path = '/{Bucket}/{Key}'.sub('{' + 'Bucket' + '}', CGI.escape(bucket.to_s)).sub('{' + 'Key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'GetObjectOutput' 

      # auth_names
      auth_names = opts[:auth_names] || ['iam']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#download_an_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of all buckets owned by the authenticated sender of the request.
    # @param [Hash] opts the optional parameters
    # @return [ListBucketsOutput]
    def list_buckets(opts = {})
      data, _status_code, _headers = list_buckets_with_http_info(opts)
      data
    end

    # Returns a list of all buckets owned by the authenticated sender of the request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListBucketsOutput, Integer, Hash)>] ListBucketsOutput data, response status code and response headers
    def list_buckets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_buckets ...'
      end
      # resource path
      local_var_path = '/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ListBucketsOutput' 

      # auth_names
      auth_names = opts[:auth_names] || ['iam']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_buckets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns some or all (up to 1000) of the objects in a bucket. You can use the request parameters as selection criteria to return a subset of the objects in a bucket.
    # @param bucket [String] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :max_keys Pagination limit
    # @option opts [String] :marker Pagination token
    # @return [ListObjectsOutput]
    def list_objects(bucket, body, opts = {})
      data, _status_code, _headers = list_objects_with_http_info(bucket, body, opts)
      data
    end

    # Returns some or all (up to 1000) of the objects in a bucket. You can use the request parameters as selection criteria to return a subset of the objects in a bucket.
    # @param bucket [String] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :max_keys Pagination limit
    # @option opts [String] :marker Pagination token
    # @return [Array<(ListObjectsOutput, Integer, Hash)>] ListObjectsOutput data, response status code and response headers
    def list_objects_with_http_info(bucket, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_objects ...'
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling DefaultApi.list_objects"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.list_objects"
      end
      # resource path
      local_var_path = '/{Bucket}?'.sub('{' + 'Bucket' + '}', CGI.escape(bucket.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'MaxKeys'] = opts[:'max_keys'] if !opts[:'max_keys'].nil?
      query_params[:'Marker'] = opts[:'marker'] if !opts[:'marker'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'ListObjectsOutput' 

      # auth_names
      auth_names = opts[:auth_names] || ['iam']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_objects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds an object to a bucket.
    # @param bucket [String] 
    # @param key [String] 
    # @param put_object_request [PutObjectRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def upload_an_object(bucket, key, put_object_request, opts = {})
      data, _status_code, _headers = upload_an_object_with_http_info(bucket, key, put_object_request, opts)
      data
    end

    # Adds an object to a bucket.
    # @param bucket [String] 
    # @param key [String] 
    # @param put_object_request [PutObjectRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def upload_an_object_with_http_info(bucket, key, put_object_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.upload_an_object ...'
      end
      # verify the required parameter 'bucket' is set
      if @api_client.config.client_side_validation && bucket.nil?
        fail ArgumentError, "Missing the required parameter 'bucket' when calling DefaultApi.upload_an_object"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.upload_an_object"
      end
      # verify the required parameter 'put_object_request' is set
      if @api_client.config.client_side_validation && put_object_request.nil?
        fail ArgumentError, "Missing the required parameter 'put_object_request' when calling DefaultApi.upload_an_object"
      end
      # resource path
      local_var_path = '/{Bucket}/{Key}'.sub('{' + 'Bucket' + '}', CGI.escape(bucket.to_s)).sub('{' + 'Key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(put_object_request) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['iam']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#upload_an_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
