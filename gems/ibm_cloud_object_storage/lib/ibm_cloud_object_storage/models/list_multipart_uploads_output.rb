=begin
#COS Compatibility S3 API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: nicholas.lange@ibm.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-beta2

=end

require 'date'

module IbmCloudObjectStorage
  class ListMultipartUploadsOutput
    attr_accessor :bucket

    attr_accessor :key_marker

    attr_accessor :upload_id_marker

    attr_accessor :next_key_marker

    attr_accessor :prefix

    attr_accessor :delimiter

    attr_accessor :next_upload_id_marker

    attr_accessor :max_uploads

    attr_accessor :is_truncated

    attr_accessor :uploads

    attr_accessor :common_prefixes

    attr_accessor :encoding_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'bucket' => :'Bucket',
        :'key_marker' => :'KeyMarker',
        :'upload_id_marker' => :'UploadIdMarker',
        :'next_key_marker' => :'NextKeyMarker',
        :'prefix' => :'Prefix',
        :'delimiter' => :'Delimiter',
        :'next_upload_id_marker' => :'NextUploadIdMarker',
        :'max_uploads' => :'MaxUploads',
        :'is_truncated' => :'IsTruncated',
        :'uploads' => :'Uploads',
        :'common_prefixes' => :'CommonPrefixes',
        :'encoding_type' => :'EncodingType'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'bucket' => :'String',
        :'key_marker' => :'String',
        :'upload_id_marker' => :'String',
        :'next_key_marker' => :'String',
        :'prefix' => :'String',
        :'delimiter' => :'String',
        :'next_upload_id_marker' => :'String',
        :'max_uploads' => :'Integer',
        :'is_truncated' => :'Boolean',
        :'uploads' => :'Array<MultipartUpload>',
        :'common_prefixes' => :'Array<CommonPrefix>',
        :'encoding_type' => :'EncodingType'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IbmCloudObjectStorage::ListMultipartUploadsOutput` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IbmCloudObjectStorage::ListMultipartUploadsOutput`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'bucket')
        self.bucket = attributes[:'bucket']
      end

      if attributes.key?(:'key_marker')
        self.key_marker = attributes[:'key_marker']
      end

      if attributes.key?(:'upload_id_marker')
        self.upload_id_marker = attributes[:'upload_id_marker']
      end

      if attributes.key?(:'next_key_marker')
        self.next_key_marker = attributes[:'next_key_marker']
      end

      if attributes.key?(:'prefix')
        self.prefix = attributes[:'prefix']
      end

      if attributes.key?(:'delimiter')
        self.delimiter = attributes[:'delimiter']
      end

      if attributes.key?(:'next_upload_id_marker')
        self.next_upload_id_marker = attributes[:'next_upload_id_marker']
      end

      if attributes.key?(:'max_uploads')
        self.max_uploads = attributes[:'max_uploads']
      end

      if attributes.key?(:'is_truncated')
        self.is_truncated = attributes[:'is_truncated']
      end

      if attributes.key?(:'uploads')
        if (value = attributes[:'uploads']).is_a?(Array)
          self.uploads = value
        end
      end

      if attributes.key?(:'common_prefixes')
        if (value = attributes[:'common_prefixes']).is_a?(Array)
          self.common_prefixes = value
        end
      end

      if attributes.key?(:'encoding_type')
        self.encoding_type = attributes[:'encoding_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bucket == o.bucket &&
          key_marker == o.key_marker &&
          upload_id_marker == o.upload_id_marker &&
          next_key_marker == o.next_key_marker &&
          prefix == o.prefix &&
          delimiter == o.delimiter &&
          next_upload_id_marker == o.next_upload_id_marker &&
          max_uploads == o.max_uploads &&
          is_truncated == o.is_truncated &&
          uploads == o.uploads &&
          common_prefixes == o.common_prefixes &&
          encoding_type == o.encoding_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [bucket, key_marker, upload_id_marker, next_key_marker, prefix, delimiter, next_upload_id_marker, max_uploads, is_truncated, uploads, common_prefixes, encoding_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        IbmCloudObjectStorage.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
