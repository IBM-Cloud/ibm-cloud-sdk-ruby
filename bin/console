#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'ibm-cloud-sdk'

begin
  require 'pry'
  require 'thor'

  # A Thor CLI for instaiating the CloudSDK.
  class CloudCLI < Thor
    include Thor::Actions

    def self.class_option(sym)
      opts = IBM::CloudSDK.env_options[sym]
      default = ENV[opts[:env_var]] || opts[:default]
      description = "#{opts[:desc]} Environemnt Variable: #{opts[:env_var]}"
      super(sym, { desc: description, default: default })
    end

    class_option :api_key
    class_option :region
    class_option :crn
    class_option :guid
    class_option :tenant

    desc 'cli', 'Start a Cloud SDK CLI'
    def cli
      IBM::CloudSDK.cli_help
      IBM::CloudSDK.new(cli_options: options).pry
    rescue RuntimeError, ArgumentError => e
      puts e.full_message
    end

    desc 'variables output ', 'Save the options to a Envionrment variables source file.'
    def variables(output)
      script = "# Source this file to set the environment variables necessary for the Cloud SDK.\n"
      IBM::CloudSDK.env_options.each do |k, v|
        script += "export #{v[:env_var]}=#{options[k.to_sym]}\n"
      end
      script += "\n"
      create_file(output, script)
    end

    # Print help for command.
    # @param command [String] The command to get help for. default: nil
    # @param subcommand [Boolean] Whether this is a subcommand. default: false
    # @return [String]
    def help(command = nil, subcommand = false)
      super(command, subcommand)
    end
  end

  CloudCLI.default_command(:cli)
  CloudCLI.start(ARGV)
rescue LoadError
  require 'irb'
  IRB.start(__FILE__)
end
